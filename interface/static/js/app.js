// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var App, CommentThumb, FilmThumb, Item, Location, Page, Page_Film, Page_Login, Page_Main, Page_Person, Page_Register, Page_User, PersonThumb, User, check_app_is_init, error,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.mi_app = void 0;

  error = function(txt, type) {
    if (type == null) {
      type = "norm";
    }
    if (type === "crit") {
      throw new Error("CRITICAL ERROR: " + txt);
    } else {
      return console.log("ERROR: " + txt);
    }
  };

  check_app_is_init = function(c) {
    if (!window.mi_app) {
      return error("App is not init", "crit");
    } else {
      return c._app = window.mi_app;
    }
  };

  Location = (function() {
    var obj;

    obj = void 0;

    function Location(parent, vals) {
      this.parent = parent;
      this.vals = vals;
    }

    Location.prototype.show = function() {
      var html;
      if (obj === void 0) {
        html = void 0;
        console.log(this.vals.type);
        if (this.vals.type === "ivi") {
          html = '<iframe src="http://www.ivi.ru/external/stub?videoId=' + this.vals.value + '&subsiteId=138" width="860" height="480" frameborder="0"></iframe><div style="top:-200px; z-index:-1; position: relative;">';
        } else if (this.vals.type === "now") {
          html = '<iframe name="now1028482" src="http://www.now.ru/embed/frame/' + this.vals.value + '" scrolling="no" frameborder="no" height="480" width="860"></iframe>';
        } else if (this.vals.type === "megogo") {
          html = '<iframe width="850" height="480" src="http://megogo.net/e/' + this.vals.value + '" frameborder="0" allowfullscreen></iframe>';
        } else if (this.vals.type === "tvigle") {
          html = '<object type="application/x-shockwave-flash" data="http://www.tvigle.ru//swf/tvigle_v12.swf?ver=3.5919999999999757" width="860" height="480" id="plr" style="visibility: visible;"><param name="allowScriptAccess" value="always"><param name="bgcolor" value="#000000"><param name="quality" value="high"><param name="scale" value="noscale"><param name="allowFullScreen" value="true"><param name="wmode" value="transparent"><param name="flashvars" value="ref=1&amp;obj=' + this.vals.value + '&amp;cnl=1882&amp;sid_name=&amp;user_sid=&amp;own=0&amp;w=860&amp;h=480&amp;ap=1&amp;afbr=1&amp;region=RU&amp;skin=&amp;d=tvigle.ru"></object>';
        }
        if (html === void 0) {
          console.log("Error: unknown location type");
          html = '<img src=@_app.config("noposter_url") />';
        }
        return obj = $(html).appendTo(this.parent).show();
      }
    };

    Location.prototype.hide = function() {
      if (obj !== void 0) {
        return obj.hide();
      }
    };

    Location.prototype.reset = function() {
      if (obj === void 0) {
        return;
      }
      obj.remove();
      return obj = void 0;
    };

    return Location;

  })();

  Page = (function() {
    function Page() {
      check_app_is_init(this);
      this._e = {};
      this._visible = false;
    }

    Page.prototype.show = function() {
      return this._visible = true;
    };

    Page.prototype.hide = function() {
      return this._visible = false;
    };

    Page.prototype.isVisible = function() {
      return this._visible;
    };

    Page.prototype.user_is_auth = function() {
      return this._app.user_is_auth();
    };

    return Page;

  })();

  Item = (function() {
    function Item(opts, callback) {
      if (opts == null) {
        opts = {};
      }
      if (callback == null) {
        callback = void 0;
      }
      check_app_is_init(this);
      if (!this._name) {
        error("It's wrong to use parent class", "crit");
      }
      if (opts.place === void 0) {
        this._place = $('<span class="preload-' + this._name + '"></span>');
        if (opts.parent) {
          this._place.appendTo(opts.parent);
        }
        this._app.get_tpl(this._name, (function(_this) {
          return function(tpl_obj) {
            var old_place;
            if (tpl_obj) {
              old_place = _this._place;
              _this._place = tpl_obj.clone();
              if (opts.vals) {
                _this.set_vals(opts.vals);
              }
              _this._place.insertAfter(old_place);
              old_place.remove();
              if (callback) {
                return callback(_this);
              }
            } else {
              return error('Unable to load template for object "' + _this._name + '"');
            }
          };
        })(this));
      } else {
        this._place = opts.place;
        if (opts.vals) {
          this.set_vals(opts.vals);
        }
        if (callback) {
          callback(this);
        }
      }
    }

    Item.prototype.place = function() {
      return this._place;
    };

    Item.prototype.vals = function(name) {
      if (name) {
        return this._vals[name];
      } else {
        return this._vals;
      }
    };

    Item.prototype.set_vals = function(vals) {
      var k, v, _results;
      $.extend(this.reset(), vals);
      if (vals._do_not_set === void 0) {
        _results = [];
        for (k in vals) {
          v = vals[k];
          _results.push($("." + k, this._place).html(v));
        }
        return _results;
      }
    };

    Item.prototype.user_is_auth = function() {
      return this._app.user_is_auth();
    };

    Item.prototype.reset = function() {
      return this._vals = {};
    };

    Item.prototype.show = function() {
      return this._place.show();
    };

    Item.prototype.hide = function() {
      return this._place.hide();
    };

    Item.prototype.remove = function() {
      return this._place.remove();
    };

    return Item;

  })();

  FilmThumb = (function(_super) {
    __extends(FilmThumb, _super);

    function FilmThumb(opts, callback) {
      var loc, _i, _len, _ref;
      if (opts == null) {
        opts = {};
      }
      this._name = "film-thumb";
      if (opts.vals === void 0) {
        opts.vals = {};
      }
      if (opts && opts.place) {
        opts.vals._do_not_set = true;
        opts.vals.id = opts.vals.id || opts.place.attr("id").substr(11);
        opts.vals.poster = $(".poster-place", opts.place).background_image();
        opts.vals.name = $(".name", opts.place).text();
        opts.vals.year = $(".year", opts.place).text();
        opts.vals.rating = $(".rating", opts.place).text();
        opts.vals.relation = {
          rating: $(".rateit", opts.place).rateit("value")
        };
      }
      if (opts.vals.ratings && opts.vals.ratings.cons) {
        opts.vals.rating = opts.vals.ratings.cons;
      }
      if (opts.vals.release_date) {
        opts.vals.year = opts.vals.release_date.substr(0, 4);
      }
      if (opts.vals.locations) {
        opts.vals.hasFree = false;
        opts.vals.price = 0;
        _ref = opts.vals.locations;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          loc = _ref[_i];
          if (loc.price_type === "f") {
            opts.vals.hasFree = true;
          } else {
            if (loc.price && (opts.vals.price === 0 || opts.vals.price > loc.price)) {
              opts.vals.price = loc.price;
            }
          }
        }
      }
      FilmThumb.__super__.constructor.call(this, opts, (function(_this) {
        return function() {
          var rFloor, rInt, rel, ri;
          if (!opts.place) {
            $(".rateit", _this._place).rateit();
          }
          ri = $(".rateit", _this._place);
          ri.rateit("min", 0).rateit("max", 10).bind("beforerated beforereset", function(event) {
            if (!_this.user_is_auth()) {
              alert("You have to be signed");
              return event.preventDefault();
            }
          }).bind("reset rated", function(event) {
            return _this.action_rate(ri.rateit("value"));
          });
          rel = _this.vals("relation");
          if (rel) {
            if (rel.rating !== void 0) {
              rInt = Math.floor(rel.rating);
              rFloor = 0;
              if (rel.rating - rInt > 0.5) {
                rFloor = 0.5;
              }
              ri.rateit("value", rInt + rFloor);
            }
          }
          $(".notwatch-btn", _this._place).click(function() {
            return _this.action_toggle_notwatch();
          });
          $(".notinstock button", _this._place).click(function() {
            return _this.action_toggle_subscribe();
          });
          if (callback) {
            return callback(_this);
          }
        };
      })(this));
    }

    FilmThumb.prototype.action_toggle_notwatch = function(status) {
      var action, new_notwatch, rel;
      if (this.user_is_auth()) {
        rel = this.vals("relation.notwatch");
        if (status !== void 0) {
          new_notwatch = status;
        } else {
          new_notwatch = true;
          if (rel && rel.notwatch) {
            new_notwatch = false;
          }
        }
        if (new_notwatch) {
          action = "update";
        } else {
          action = "destroy";
        }
        return this._app.rest.films.action.notwatch[action](this.vals("id")).done(function() {
          return rel.new_notwatch = new_notwatch;
        });
      }
    };

    FilmThumb.prototype.action_toggle_subscribe = function(status) {
      var action, new_subscribed, rel;
      if (this.user_is_auth()) {
        rel = this.vals("relation");
        if (status !== void 0) {
          new_subscribed = status;
        } else {
          new_subscribed = true;
          if (rel && rel.subscribed) {
            new_subscribed = false;
          }
        }
        if (new_subscribed) {
          action = "update";
        } else {
          action = "destroy";
        }
        return this._app.rest.films.action.subscribe[action](this.vals("id")).done(function() {
          return rel.subscribed = new_subscribed;
        });
      }
    };

    FilmThumb.prototype.action_rate = function(val) {
      if (this.user_is_auth()) {
        return this._app.rest.films.action.rate.update(this.vals("id"), {
          rating: val
        });
      }
    };

    FilmThumb.prototype.reset = function() {
      return this._vals = {
        id: null,
        name: null,
        poster: null,
        year: null,
        rating: null,
        user: null,
        hasFree: null,
        price: null
      };
    };

    FilmThumb.prototype.set_vals = function() {
      var instock;
      FilmThumb.__super__.set_vals.apply(this, arguments);
      this._place.attr("id", "film-thumb-" + this._vals.id);
      $(".name", this._place).attr("href", "/films/" + this._vals.id);
      $(".poster-place", this._place).background_image(this._vals.poster || this._app.config("noposter_url"));
      if (this._vals.rating) {
        $(".rating-place", this._place).visible();
      } else {
        $(".rating-place", this._place).invisible();
      }
      if (this._vals.hasFree || this._vals.price) {
        instock = $(".instock", this._place);
        instock.removeClass("display-none");
        $(".notinstock", this._place).addClass("display-none");
        if (this._vals.hasFree) {
          $("button", instock).html("смотреть<br/>бесплатно");
          if (this._vals.price) {
            $(".watchprice", instock).visible();
            return $("button", instock).addClass("action-priced");
          }
        } else {
          return $("button", instock).html("СМОТРЕТЬ <br/><span>от <span class=\"price\">" + this._vals.price + "</span> р. без рекламы</span>");
        }
      } else {
        $(".instock", this._place).addClass("display-none");
        return $(".notinstock", this._place).removeClass("display-none");
      }
    };

    return FilmThumb;

  })(Item);

  PersonThumb = (function(_super) {
    __extends(PersonThumb, _super);

    function PersonThumb(opts, callback) {
      if (opts == null) {
        opts = {};
      }
      this._name = "person-thumb";
      if (opts.vals === void 0) {
        opts.vals = {};
      }
      if (opts && opts.place) {
        opts.vals._do_not_set = true;
        opts.vals.id = opts.vals.id || opts.place.attr("id").substr(13);
        opts.vals.photo = $(opts.place).background_image();
        opts.vals.name = $(".name", opts.place).text();
      }
      PersonThumb.__super__.constructor.call(this, opts, (function(_this) {
        return function() {
          if (callback) {
            return callback(_this);
          }
        };
      })(this));
    }

    PersonThumb.prototype.reset = function() {
      return this._vals = {
        id: null,
        name: null,
        photo: null
      };
    };

    PersonThumb.prototype.set_vals = function() {
      PersonThumb.__super__.set_vals.apply(this, arguments);
      this._place.attr("id", this._name + this._vals.id);
      $(".name", this._place).attr("href", "/person/" + this._vals.id);
      return $(this._place).background_image(this._vals.photo || this._app.config("noperson_url"));
    };

    return PersonThumb;

  })(Item);

  CommentThumb = (function(_super) {
    __extends(CommentThumb, _super);

    function CommentThumb(opts, callback) {
      if (opts == null) {
        opts = {};
      }
      this._name = "comment-thumb";
      if (opts.vals === void 0) {
        opts.vals = {};
      }
      if (opts && opts.place) {
        opts.vals._do_not_set = true;
        opts.vals.id = opts.vals.id || opts.place.attr("id").substr(13);
        opts.vals.photo = $(opts.place).background_image();
        opts.vals.name = $(".name", opts.place).text();
      }
      CommentThumb.__super__.constructor.call(this, opts, (function(_this) {
        return function() {
          if (callback) {
            return callback(_this);
          }
        };
      })(this));
    }

    CommentThumb.prototype.reset = function() {
      return this._vals = {
        id: null,
        name: null,
        photo: null
      };
    };

    CommentThumb.prototype.set_vals = function() {
      CommentThumb.__super__.set_vals.apply(this, arguments);
      this._place.attr("id", this._name + this._vals.id);
      $(".name", this._place).attr("href", "/person/" + this._vals.id);
      return $(this._place).css("background-image", 'url("' + (this._vals.photo || conf.no_person_url) + '")');
    };

    return CommentThumb;

  })(Item);

  User = (function() {
    function User(parent) {
      this.parent = parent;
      checkAppIsInit(this);
    }

    return User;

  })();

  App = (function() {
    var active_page, conf, pages, query_params, templates, user;

    conf = window.mi_conf || {};

    user = {
      id: null,
      name: ""
    };

    templates = {};

    pages = {};

    active_page = void 0;

    query_params = void 0;

    function App(opts, name) {
      if (opts == null) {
        opts = {};
      }
      if (window.me_app) {
        error("App is already running", "crit");
      }
      window.mi_app = this;
      if (!$.RestClient) {
        error("No Rest Library found");
      }
      $.extend(conf, opts);
      this.rest = new $.RestClient(conf.api_url);
      this.rest.add("user");
      this.rest.add("users");
      this.rest.users.add("films");
      this.rest.users.add("persons");
      this.rest.users.add("friendship");
      this.rest.users.add("friends");
      this.rest.add("films");
      this.rest.films.add("persons");
      this.rest.films.add("action", {
        isSingle: true
      });
      this.rest.films.action.add("rate");
      this.rest.films.action.add("subscribe");
      this.rest.films.action.add("notwatch");
      this.rest.add("persons");
      this.rest.persons.add("filmography", {
        isSingle: true
      });
      this._e = {};
      this._e.search = {
        form: $("#frm_search").submit((function(_this) {
          return function() {
            _this.search_submit();
            return false;
          };
        })(this)),
        input: $("#inp_search").keydown((function(_this) {
          return function() {
            return _this.search_keydown;
          };
        })(this)),
        button: $("#inp_button").click((function(_this) {
          return function() {
            _this.search_submit();
            return false;
          };
        })(this))
      };
      this._e.user_reg = {
        place: $("#usr_reg_place")
      };
      this._e.user_guest = {
        place: $("#usr_guest_place")
      };
      this._e.search.input.val(this.query_params("text") || "");
      if (name !== void 0) {
        this.show_page(name, conf.page_conf);
      }
    }

    App.prototype.config = function(name) {
      if (name === void 0) {
        return conf;
      } else {
        return conf[name];
      }
    };

    App.prototype.user_is_auth = function() {
      return true;
    };

    App.prototype.search_keydown = function(event) {
      if (event.which === 13) {
        this._e.search.button.click();
        return;
      }
      if (event.which === 27) {
        return this._e.input.val("").focus();
      }
    };

    App.prototype.search_submit = function() {
      var text;
      text = this._e.search.input.val() || "";
      if (active_page === "Main") {
        this.page().filter_changed(text);
        return $(window).scrollTop(this.page()._e.filter.parent.offset().top);
      } else {
        if (text) {
          return window.location.href = "/?text=" + text + "#filter";
        }
      }
    };

    App.prototype.query_params = function(name) {
      if (!query_params) {
        query_params = $.parseParams();
      }
      if (name) {
        return query_params[name];
      } else {
        return query_params;
      }
    };

    App.prototype.get_tpl = function(name, callback) {
      var ajax_opts;
      if (templates[name]) {
        if (callback) {
          return callback(templates[name]);
        }
      } else {
        ajax_opts = {
          url: this.config("tpl_url") + name + ".html",
          dataType: "html",
          error: function() {
            error("Unable to load template name \"" + name + "\"");
            if (callback) {
              return callback(void 0);
            }
          },
          success: (function(_this) {
            return function(data) {
              if (callback) {
                return callback(templates[name] = $(data));
              }
            };
          })(this)
        };
        return $.ajax(ajax_opts);
      }
    };

    App.prototype.register_tpl = function(name, jObj) {
      return templates[name] = jObj;
    };

    App.prototype.hide_page = function(name) {
      if (!_pages[name]) {
        if (active_page === name) {
          pages[name].hide();
          return active_page = void 0;
        } else {
          return error("Page " + name + " is not active");
        }
      } else {
        return error("No page " + name + "found");
      }
    };

    App.prototype.show_page = function(name, conf) {
      var p;
      p = this.page(name, conf);
      if (p) {
        active_page = name;
        return p.show();
      } else {
        return error("No page " + name + "found");
      }
    };

    App.prototype.active_page = function() {
      return active_page;
    };

    App.prototype.page = function(name, conf) {
      var page_obj;
      if (name === void 0) {
        name = active_page;
      }
      if (pages[name]) {
        return pages[name];
      }
      page_obj = new (eval("Page_" + name))(conf);
      return pages[name] = page_obj;
    };

    return App;

  })();

  Page_Main = (function(_super) {
    var _current_page, _films, _films_new, _filter_counter, _filter_params, _load_counter;

    __extends(Page_Main, _super);

    _films = [];

    _films_new = [];

    _current_page = 0;

    _load_counter = 0;

    _filter_counter = 0;

    _filter_params = {};

    function Page_Main() {
      var el, filter_name, filter_obj, key, param_name, param_value, params, _ref, _ref1;
      Page_Main.__super__.constructor.apply(this, arguments);
      this._e.output_place = $("#films_place");
      this._e.filter = {
        parent: $("#frm_filter"),
        genre: $("#sel_genre"),
        year_old: $("#sel_year_old"),
        rating: $("#sel_rating"),
        price: $("#sel_price")
      };
      _ref = this._e.filter;
      for (key in _ref) {
        el = _ref[key];
        el.change(((function(_this) {
          return function() {
            return _this.filter_changed_event();
          };
        })(this)));
      }
      this._e.loadmore = {
        place: $("#load-more-place"),
        btn: $("#btn_loadmore").click((function(_this) {
          return function() {
            return _this.load_more();
          };
        })(this))
      };
      this._app.get_tpl("film-thumb");
      params = this._app.query_params();
      if (params) {
        if (params.q) {
          _filter_params.text = params.q;
        }
        for (param_name in params) {
          param_value = params[param_name];
          _ref1 = this._e.filter;
          for (filter_name in _ref1) {
            filter_obj = _ref1[filter_name];
            if (filter_name === param_name) {
              $("option", filter_obj).each(function() {
                var e;
                e = $(this);
                return e.prop("selected", e.val() === param_value);
              });
            }
          }
        }
      }
      this.update_filter_params();
      $(".film-thumb", this._e.output_place).each(function() {
        return _films.push(new FilmThumb({
          place: $(this)
        }));
      });
      $(".film-thumb", $("#new_place")).each(function() {
        return _films_new.push(new FilmThumb({
          place: $(this)
        }));
      });
      if (_films.length < 12) {
        this.load_more();
      }
    }

    Page_Main.prototype.filter_changed_event = function() {
      return this.filter_changed();
    };

    Page_Main.prototype.filter_changed = function(text) {
      var current_filter_counter;
      _filter_counter++;
      if (text !== void 0) {
        _filter_params.text = text;
      }
      current_filter_counter = _filter_counter;
      return setTimeout((function(_this) {
        return function() {
          var opts;
          if (_filter_counter === current_filter_counter) {
            _this.update_filter_params();
            opts = {
              clear_output: true,
              page_loading: false,
              params: _filter_params
            };
            return _this.load_films(opts);
          }
        };
      })(this), this._app.config("filter_delay"));
    };

    Page_Main.prototype.load_more = function(page_cnt) {
      var opts;
      if (page_cnt == null) {
        page_cnt = 1;
      }
      this._e.loadmore.btn.prop('disabled', true);
      opts = {
        clear_output: false,
        page_loading: true,
        params: _filter_params
      };
      return this.load_films(opts);
    };

    Page_Main.prototype.update_filter_params = function(update_href) {
      var el, key, query_string, val, _ref;
      if (update_href == null) {
        update_href = true;
      }
      if (_filter_params.text) {
        query_string = "text=" + encodeURI(_filter_params.text);
      } else {
        query_string = "";
      }
      if (_current_page) {
        _filter_params.page = _current_page;
        if (query_string) {
          query_string += "&";
        }
        query_string += "page=" + _current_page;
      }
      _ref = this._e.filter;
      for (key in _ref) {
        el = _ref[key];
        val = el.val();
        if (val && val !== "0") {
          _filter_params[key] = val;
          if (query_string) {
            query_string += "&";
          }
          query_string += key + "=" + val;
        } else {
          _filter_params[key] = null;
        }
      }
      if (query_string) {
        query_string = "?" + query_string;
      }
      if (update_href) {
        if (history && history.pushState) {
          return history.pushState(null, null, query_string);
        }
      }
    };

    Page_Main.prototype.load_films = function(opts) {
      var current_counter, i;
      if (opts == null) {
        opts = {};
      }
      _load_counter++;
      current_counter = _load_counter;
      if (opts.clear_output) {
        i = 0;
        while (i < _films.length) {
          delete _films[i];
          i++;
        }
        _films = [];
        this._e.output_place.empty();
      }
      if (!opts.page_loading) {
        this._e.loadmore.place.hide();
      }
      if (!opts.params) {
        opts.params = {};
      }
      return this._app.rest.films.read("search", opts.params).done((function(_this) {
        return function(data) {
          var item, _i, _len, _ref;
          if (current_counter !== _load_counter) {
            return;
          }
          if (data.items) {
            _ref = data.items;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              item = _ref[_i];
              _films.push(new FilmThumb({
                parent: _this._e.output_place,
                vals: item
              }));
            }
          }
          if (Math.ceil(data.total_cnt / data.per_page) > data.page) {
            _this._e.loadmore.place.show();
            _this._e.loadmore.btn.prop('disabled', false);
          }
          _current_page = data.page;
          if (opts.callback) {
            return opts.callback();
          }
        };
      })(this)).fail((function(_this) {
        return function(data) {};
      })(this));
    };

    return Page_Main;

  })(Page);

  Page_Login = (function(_super) {
    __extends(Page_Login, _super);

    function Page_Login() {
      return Page_Login.__super__.constructor.apply(this, arguments);
    }

    return Page_Login;

  })(Page);

  Page_Register = (function(_super) {
    __extends(Page_Register, _super);

    function Page_Register() {
      return Page_Register.__super__.constructor.apply(this, arguments);
    }

    return Page_Register;

  })(Page);

  Page_Person = (function(_super) {
    var _current_page, _films, _load_counter, _opts;

    __extends(Page_Person, _super);

    _films = [];

    _current_page = 0;

    _load_counter = 0;

    _opts = {};

    function Page_Person(opts) {
      if (opts == null) {
        opts = {};
      }
      this.action_subscribe_toggle = __bind(this.action_subscribe_toggle, this);
      _opts = opts;
      this.person_id = opts.id;
      Page_Person.__super__.constructor.apply(this, arguments);
      this._e.films_place = $("#films");
      this._e.loadmore = {
        place: $("#load-more-place"),
        btn: $("#btn_loadmore").click((function(_this) {
          return function() {
            return _this.load_more();
          };
        })(this))
      };
      this._app.get_tpl("film-thumb");
      $(".film-thumb", this._e.films_place).each(function() {
        return _films.push(new FilmThumb({
          place: $(this)
        }));
      });
      if (_films.length < 12) {
        this.load_more();
      }
      this._e.subscribe = $("#subscribe_btn").click((function(_this) {
        return function() {
          return _this.action_subscribe_toggle();
        };
      })(this));
    }

    Page_Person.prototype.action_subscribe_toggle = function(status) {
      var action, new_subscribed, rel;
      if (this.user_is_auth()) {
        rel = _opts.relation || {};
        if (status !== void 0) {
          new_subscribed = status;
        } else {
          new_subscribed = true;
          if (rel && rel.subscribed) {
            new_subscribed = false;
          }
        }
        if (new_subscribed) {
          action = "update";
        } else {
          action = "destroy";
        }
        return this._app.rest.films.action.subscribe[action](_opts.id).done(function() {
          return rel.subscribed = new_subscribed;
        });
      }
    };

    Page_Person.prototype.load_more = function(page_cnt) {
      var current_counter;
      if (page_cnt == null) {
        page_cnt = 1;
      }
      this._e.loadmore.btn.prop('disabled', true);
      _load_counter++;
      current_counter = _load_counter;
      this._e.loadmore.place.hide();
      return this._app.rest.persons.filmography.read(this.person_id, {}).done((function(_this) {
        return function(data) {
          var item, _i, _len, _ref;
          if (current_counter !== _load_counter) {
            return;
          }
          if (data.items) {
            _ref = data.items;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              item = _ref[_i];
              _films.push(new FilmThumb({
                parent: _this._e.films_place,
                vals: item
              }));
            }
          }
          if (Math.ceil(data.total_cnt / data.per_page) > data.page) {
            _this._e.loadmore.place.show();
            _this._e.loadmore.btn.prop('disabled', false);
          }
          return _current_page = data.page;
        };
      })(this)).fail((function(_this) {
        return function(data) {};
      })(this));
    };

    return Page_Person;

  })(Page);

  Page_Film = (function(_super) {
    var actors, current_location, films_similar, locations, opts;

    __extends(Page_Film, _super);

    locations = [];

    current_location = null;

    films_similar = [];

    actors = [];

    opts = {};

    function Page_Film(new_opts) {
      var loc;
      if (new_opts == null) {
        new_opts = {};
      }
      Page_Film.__super__.constructor.apply(this, arguments);
      opts = new_opts;
      this._app.get_tpl("film-thumb");
      this._app.get_tpl("person-thumb");
      this._e = {
        pleer_place: $("#pleer_place")
      };
      if (opts.locations) {
        $(opts.locations).each((function(_this) {
          return function(key, item) {
            var el;
            el = $("#loc_thumb_" + item.id);
            if (el.length) {
              locations[item.id] = new Location(_this._e.pleer_place, item);
              return $("button", el).click(function() {
                console.log(item);
                return _this.set_location(item.id);
              });
            }
          };
        })(this));
      }
      this._e.film_thumb = $("#film_thumb");
      new FilmThumb({
        place: this._e.film_thumb,
        vals: {
          id: opts.id
        }
      });
      this._e.films_similar = $("#films_similar");
      $(".film-thumb", this._e.films_similar).each(function() {
        return films_similar.push(new FilmThumb({
          place: $(this)
        }));
      });
      this._e.actors = $("#actors");
      $(".person-thumb", this._e.actors).each(function() {
        return actors.push(new PersonThumb({
          place: $(this)
        }));
      });
      this._e.btn_moreactors = $("#btn_moreactors");
      this._e.btn_moreactors.click((function(_this) {
        return function() {
          return _this.load_actors();
        };
      })(this));
      loc = this._app.query_params("loc");
      if (loc && locations[loc]) {
        this.set_location(loc);
      }
    }

    Page_Film.prototype.set_location = function(id) {
      if (current_location === id) {
        return;
      }
      if (current_location !== null) {
        locations[current_location].reset();
      }
      return locations[current_location = id].show();
    };

    Page_Film.prototype.load_actors = function() {
      this._e.btn_moreactors.parent().hide();
      return this._app.rest.films.persons.read(opts.id, {
        type: "a"
      }).done((function(_this) {
        return function(data) {
          var i, item, _i, _len, _results;
          if (data && data.length) {
            _results = [];
            for (_i = 0, _len = data.length; _i < _len; _i++) {
              item = data[_i];
              i = 0;
              while (i < actors.length && actors[i].id !== item.id) {
                i++;
              }
              if (i >= actors.length) {
                _results.push(actors.push(new PersonThumb({
                  parent: _this._e.actors,
                  vals: item
                })));
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          }
        };
      })(this));
    };

    Page_Film.prototype.load_more_comments = function() {};

    return Page_Film;

  })(Page);

  Page_User = (function(_super) {
    var _actors, _directors, _films_subscribed, _films_subscribed_page, _friends, _opts;

    __extends(Page_User, _super);

    _friends = [];

    _films_subscribed = [];

    _films_subscribed_page = 1;

    _actors = [];

    _directors = [];

    _opts = {};

    function Page_User(opts) {
      if (opts == null) {
        opts = {};
      }
      _opts = opts;
      this.user_id = opts.id;
      Page_User.__super__.constructor.apply(this, arguments);
      this._e.films_subscribed = $("#films_subscribed");
      this._e.more_films_subscribed = {
        place: $("#more_films_subscribed_place"),
        btn: $("#more_films_subscribed").click((function(_this) {
          return function() {
            return _this.load_more_films_subscribed();
          };
        })(this))
      };
      this._e.actors_fav = $("#actors_fav");
      this._e.more_actors_fav = {
        place: $("#more_actors_fav_place"),
        btn: $("#more_actors_fav").click((function(_this) {
          return function() {
            return _this.load_more_actors_fav();
          };
        })(this))
      };
      this._e.directors_fav = $("#directors_fav");
      this._e.more_directors_fav = {
        place: $("#more_directors_fav_place"),
        btn: $("#more_directors_fav").click((function(_this) {
          return function() {
            return _this.load_more_directors_fav();
          };
        })(this))
      };
      this._app.get_tpl("film-thumb");
      this._app.get_tpl("person-thumb");
      $(".film-thumb", this._e.films_subscribed).each(function() {
        return _films_subscribed.push(new FilmThumb({
          place: $(this)
        }));
      });
      if (_films_subscribed.length < 12) {
        this.load_more_films_subscribed();
      }
      $(".person-thumb", this._e.actors_fav).each(function() {
        return _actors.push(new PersonThumb({
          place: $(this)
        }));
      });
      $(".person-thumb", this._e.directors_fav).each(function() {
        return _directors.push(new PersonThumb({
          place: $(this)
        }));
      });
    }

    Page_User.prototype.load_more_films_subscribed = function(page_cnt) {
      if (page_cnt == null) {
        page_cnt = 1;
      }
      this._e.more_films_subscribed.btn.prop('disabled', true);
      this._e.more_films_subscribed.place.hide();
      _films_subscribed_page++;
      return this._app.rest.users.films.read(this.user_id, {
        page: _films_subscribed_page
      }).done((function(_this) {
        return function(data) {
          var item, _i, _len, _ref;
          if (data.items) {
            _ref = data.items;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              item = _ref[_i];
              _films_subscribed.push(new FilmThumb({
                parent: _this._e.films_subscribed,
                vals: item
              }));
            }
          }
          if (Math.ceil(data.total_cnt / data.per_page) > data.page) {
            _this._e.more_films_subscribed.place.show();
            _this._e.more_films_subscribed.btn.prop('disabled', false);
          }
          return _films_subscribed_page = data.page;
        };
      })(this)).fail((function(_this) {
        return function(data) {};
      })(this));
    };

    Page_User.prototype.load_more_actors_fav = function() {
      this._e.more_actors_fav.place.hide();
      return this._app.rest.users.persons.read(_opts.id, {
        type: "a"
      }).done((function(_this) {
        return function(data) {
          var i, item, _i, _len, _results;
          if (data && data.length) {
            _results = [];
            for (_i = 0, _len = data.length; _i < _len; _i++) {
              item = data[_i];
              i = 0;
              while (i < _actors.length && _actors[i].id !== item.id) {
                i++;
              }
              if (i >= _actors.length) {
                _results.push(_actors.push(new PersonThumb({
                  parent: _this._e.actors_fav,
                  vals: item
                })));
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          }
        };
      })(this));
    };

    Page_User.prototype.load_more_directors_fav = function() {
      this._e.more_actors_fav.place.hide();
      return this._app.rest.users.persons.read(_opts.id, {
        type: "d"
      }).done((function(_this) {
        return function(data) {
          var i, item, _i, _len, _results;
          if (data && data.length) {
            _results = [];
            for (_i = 0, _len = data.length; _i < _len; _i++) {
              item = data[_i];
              i = 0;
              while (i < _directors.length && _directors[i].id !== item.id) {
                i++;
              }
              if (i >= _directors.length) {
                _results.push(_directors.push(new PersonThumb({
                  parent: _this._e.directors_fav,
                  vals: item
                })));
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          }
        };
      })(this));
    };

    return Page_User;

  })(Page);

  window.InitApp = function(opts, page_name) {
    if (opts == null) {
      opts = {};
    }
    new App(opts, page_name);
    return delete window.InitApp;
  };

}).call(this);
