// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var App, CastThumb, CastsDeck, CommentThumb, CommentsDeck, Deck, FeedDeck, FeedThumb, FilmThumb, FilmsDeck, Item, Page, Page_Account, Page_Cast, Page_CastsList, Page_Feed, Page_Film, Page_Login, Page_Main, Page_Person, Page_Playlist, Page_Register, Page_Search, Page_Simple, Page_User, PersonThumb, PersonsDeck, Player, PlayerCast, check_app_is_init, error, scroll_to_obj, stars_tootltips, state_toggle,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.mi_app = void 0;

  error = function(txt, type) {
    if (type == null) {
      type = "norm";
    }
    if (type === "crit") {
      throw new Error("CRITICAL ERROR: " + txt);
    } else {
      return console.log("ERROR: " + txt);
    }
  };

  check_app_is_init = function(c) {
    if (!window.mi_app) {
      return error("App is not init", "crit");
    } else {
      return c._app = window.mi_app;
    }
  };

  state_toggle = function(new_state, cur_state, deflt) {
    if (new_state === void 0) {
      if (cur_state === void 0) {
        if (deflt !== void 0) {
          return deflt;
        } else {
          return 1;
        }
      } else if (cur_state) {
        return 0;
      } else {
        return 1;
      }
    } else {
      return typeof new_state === "function" ? new_state({
        1: 0
      }) : void 0;
    }
  };

  scroll_to_obj = function(obj, duration) {
    if (duration == null) {
      duration = 1000;
    }
    return $('html, body').stop().animate({
      scrollTop: obj.offset().top
    }, duration);
  };

  stars_tootltips = ["не смотреть", "хуже не бывает", "очень плохо", "плохо", "ниже среднего", "средне", "неплохо", "хорошо", "отлично", "великолепно", "лучше не бывает"];

  Player = (function() {
    function Player(place, opts) {
      this.place = place;
      if (opts == null) {
        opts = {};
      }
      this.current = void 0;
    }

    Player.prototype.load = function(loc, scroll, autoplay) {
      var value;
      if (scroll == null) {
        scroll = true;
      }
      if (autoplay == null) {
        autoplay = true;
      }
      if (this.current !== void 0) {
        this.clear();
      }
      if (loc.price_type !== 0 && loc.type !== "playfamily") {
        value = "&price=" + loc.price + "&view=" + encodeURI(loc.url_view);
      } else {
        value = "";
        if (loc.value) {
          value = "&value=" + loc.value;
        }
        if (loc.url_view) {
          value += "&view=" + encodeURIComponent(loc.url_view);
        }
      }
      value += "&autoplay=" + autoplay;
      this.place.empty().html('<iframe src="' + window.mi_conf.player_url + '?type=' + loc.type + value + '"></iframe>');
      if (scroll) {
        return scroll_to_obj(this.place);
      }
    };

    Player.prototype.clear = function() {
      this.place.addClass("player-empty");
      this.place.empty().height("auto");
      return this.current = void 0;
    };

    return Player;

  })();

  PlayerCast = (function() {
    function PlayerCast(place, opts) {
      this.place = place;
      if (opts == null) {
        opts = {};
      }
      this.current = void 0;
    }

    PlayerCast.prototype.load = function(loc, scroll, autoplay) {
      var value;
      if (scroll == null) {
        scroll = true;
      }
      if (autoplay == null) {
        autoplay = true;
      }
      if (this.current !== void 0) {
        this.clear();
      }
      if (loc.price_type !== 0 && false) {
        value = "&price=" + loc.price + "&view=" + encodeURI(loc.url_view);
      } else {
        value = "";
        if (loc.value) {
          value = "&value=" + encodeURIComponent(loc.value || "");
        }
        if (loc.url_view) {
          value += "&view=" + encodeURIComponent(loc.url_view);
        }
      }
      value += "&autoplay=" + autoplay;
      this.place.empty().html('<iframe src="' + window.mi_conf.player_cast_url + '?type=' + loc.type + value + '"></iframe>');
      if (scroll) {
        return scroll_to_obj(this.place);
      }
    };

    PlayerCast.prototype.clear = function() {
      this.place.addClass("player-empty");
      this.place.empty().height("auto");
      return this.current = void 0;
    };

    return PlayerCast;

  })();

  Page = (function() {
    function Page() {
      check_app_is_init(this);
      this._e = {};
      this._visible = false;
    }

    Page.prototype.show = function() {
      return this._visible = true;
    };

    Page.prototype.hide = function() {
      return this._visible = false;
    };

    Page.prototype.isVisible = function() {
      return this._visible;
    };

    Page.prototype.user_is_auth = function(modal) {
      return this._app.user_is_auth(modal);
    };

    return Page;

  })();

  Item = (function() {
    function Item(opts, callback) {
      if (opts == null) {
        opts = {};
      }
      if (callback == null) {
        callback = void 0;
      }
      check_app_is_init(this);
      if (!this._name) {
        error("It's wrong to use parent class", "crit");
      }
      this.vals = {};
      this.defaults = {};
      this.elements = {};
      this.e_attrs = {};
      this.e_vals = {};
      if (opts.defaults) {
        $.extend(this.defaults, opts.defaults);
      }
      if (opts.place === void 0) {
        this._place = $('<span class="preload-' + this._name + '"></span>');
        if (opts.parent) {
          if (opts.up) {
            this._place.prependTo(opts.parent);
          } else {
            this._place.appendTo(opts.parent);
          }
        }
        this._app.get_tpl(this._name, (function(_this) {
          return function(tpl_obj) {
            var old_place;
            if (tpl_obj) {
              old_place = _this._place;
              _this._place = tpl_obj.clone();
              _this.set_elements();
              if (opts.vals) {
                _this.set_vals(opts.vals, opts.do_not_set);
              }
              _this._place.insertAfter(old_place);
              old_place.remove();
              if (callback) {
                return callback(_this);
              }
            } else {
              return error('Unable to load template for object "' + _this._name + '"');
            }
          };
        })(this));
      } else {
        this._place = opts.place;
        this.set_elements();
        if (opts.vals) {
          this.set_vals(opts.vals, opts.do_not_set);
        }
        if (callback) {
          callback(this);
        }
      }
    }

    Item.prototype.place = function() {
      return this._place;
    };

    Item.prototype.parse_element = function($this) {
      var data, e, name, value;
      data = $this.data();
      name = void 0;
      value = void 0;
      e = {
        self: $this
      };
      return $.each(data, (function(_this) {
        return function(key, val) {
          var attr, i, method, name_arr, o;
          key = key.substr(2).toLowerCase();
          if (key === "id") {
            _this.elements[val] = e;
            if (name === void 0) {
              name = key;
            }
          }
          if (key === "name") {
            name = val;
            if (_this.e_vals[val] === void 0) {
              _this.e_vals[val] = [];
            }
            _this.e_vals[val].push(e);
          } else if (key.substr(0, 2) === "on") {
            method = key.substr(2);
            if (typeof _this[val] === "function") {
              $this.bind(method, function() {
                return _this[val]();
              });
            }
          } else if (key.substr(0, 2) === "at") {
            attr = key.substr(2);
            if (e.attr === void 0) {
              e.attr = {};
            }
            e.attr[attr] = val;
            if (_this.e_attrs[val] === void 0) {
              _this.e_attrs[val] = {};
            }
            if (_this.e_attrs[val][attr] === void 0) {
              _this.e_attrs[val][attr] = [];
            }
            _this.e_attrs[val][attr].push(e);
          } else {
            e[key] = val;
            if (key === "val") {
              value = val;
            }
          }
          if (name !== void 0 && value !== void 0) {
            name_arr = name.split(".");
            o = _this.vals;
            i = 0;
            while (i < name_arr.length - 2) {
              o = o[name_arr[i]];
              if (o === void 0) {
                o = {};
              }
              i++;
            }
            return o[name_arr[i]] = value;
          }
        };
      })(this));
    };

    Item.prototype.set_elements = function() {
      var self;
      this.elements = {};
      self = this;
      $("*", this._place).each(function() {
        return self.parse_element($(this));
      });
      return this.parse_element(this._place);
    };

    Item.prototype.get_val = function(name) {
      if (name) {
        return this.vals[name];
      } else {
        return this.vals;
      }
    };

    Item.prototype.set_val = function(name, val, do_not_set) {
      val = this.transform_val(name, val);
      this.vals[name] = val;
      if (!do_not_set) {
        return this.iterate_val(name, val || this.defaults[name]);
      }
    };

    Item.prototype.iterate_val = function(s, obj) {
      var attr, e, key, val, _i, _len, _ref, _results, _results1;
      if (typeof obj === "object") {
        _results = [];
        for (key in obj) {
          _results.push(this.iterate_val(s + "." + key, obj[key]));
        }
        return _results;
      } else {
        if (this.e_vals[s]) {
          _ref = this.e_vals[s];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            e = _ref[_i];
            e.self.html(obj || e["default"]);
          }
        }
        if (this.e_attrs[s]) {
          _results1 = [];
          for (attr in this.e_attrs[s]) {
            _results1.push((function() {
              var _j, _len1, _ref1, _results2;
              _ref1 = this.e_attrs[s][attr];
              _results2 = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                e = _ref1[_j];
                val = this.transform_attr(attr, s, obj);
                if (attr === "bg") {
                  _results2.push(e.self.background_image(val || e["default"]));
                } else {
                  _results2.push(e.self.attr(attr, val || e["default"]));
                }
              }
              return _results2;
            }).call(this));
          }
          return _results1;
        }
      }
    };

    Item.prototype.set_vals = function(vals, do_not_set) {
      var key, val;
      this.reset();
      for (key in vals) {
        val = vals[key];
        this.set_val(key, val, do_not_set);
      }
      return vals;
    };

    Item.prototype.transform_val = function(name, val) {
      return val;
    };

    Item.prototype.transform_attr = function(attr, name, val) {
      return val;
    };

    Item.prototype.user_is_auth = function() {
      return this._app.user_is_auth();
    };

    Item.prototype.reset = function() {
      return this.vals = {};
    };

    Item.prototype.show = function() {
      return this._place.show();
    };

    Item.prototype.hide = function() {
      return this._place.hide();
    };

    Item.prototype.remove = function() {
      return this._place.remove();
    };

    return Item;

  })();

  FilmThumb = (function(_super) {
    __extends(FilmThumb, _super);

    function FilmThumb(opts, callback) {
      if (opts == null) {
        opts = {};
      }
      this._name = "film-thumb";
      FilmThumb.__super__.constructor.call(this, opts, (function(_this) {
        return function() {
          var ri;
          ri = _this.elements["relation.rating"].self.rateit();
          return ri.bind("beforerated beforereset", function(event) {
            if (!_this.user_is_auth()) {
              return event.preventDefault();
            }
          }).bind("rated", function(event) {
            return _this.action_rate(ri.rateit("value"));
          }).bind("reset", function(event) {
            return _this.toggle_notwatch();
          }).bind("over", function(event, value) {
            return $(this).attr('title', stars_tootltips[value]);
          });
        };
      })(this));
    }


    /*
      @elements["poster"].self.css({"margin-left": -300}).load(->
        $this = $(this)
        $this.animate({"margin-left": 0}, 3000)
      )
     */

    FilmThumb.prototype.transform_attr = function(attr, name, val) {
      if (attr === "href" && name === "id") {
        return "/films/" + val + "/";
      } else {
        return FilmThumb.__super__.transform_attr.apply(this, arguments);
      }
    };

    FilmThumb.prototype.transform_val = function(name, val) {
      if (name === "releasedate") {
        if (val && typeof val === "string") {
          return val.substr(0, 4);
        } else {
          return '';
        }
      } else {
        return FilmThumb.__super__.transform_val.apply(this, arguments);
      }
    };

    FilmThumb.prototype.set_vals = function(vals, do_not_set) {
      var btn_cls, btn_text, loc, price_loc_cnt, text, _i, _len, _ref;
      if (vals.title_alt === void 0) {
        vals.title_alt = vals.name;
        if (vals.name_orig && vals.name !== vals.name_orig) {
          vals.title_alt += " (" + vals.name_orig + ")";
        }
        if (vals.releasedate && typeof val === "string") {
          vals.title_alt += " " + vals.releasedate.substr(0, 4);
        }
      }
      this.elements["btn_price"].self.hide();
      if (vals.locations && vals.locations.length) {
        vals.hasFree = false;
        vals.price = 0;
        price_loc_cnt = 0;
        _ref = vals.locations;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          loc = _ref[_i];
          loc.price = parseFloat(loc.price || 0);
          if (loc.price_type === 0) {
            vals.hasFree = true;
          } else {
            if (loc.price && (vals.price === 0 || loc.price < vals.price)) {
              vals.price = loc.price;
              vals.price_loc = loc.id;
            }
            price_loc_cnt++;
          }
        }
        btn_cls = false;
        btn_text = "";
        if (!vals.hasFree && vals.price) {
          btn_cls = "btn-price";
          btn_text = "Смотреть<br><i>";
          if (price_loc_cnt > 1) {
            btn_text += "от ";
          }
          btn_text += vals.price + " р. без рекламы</i>";
        } else if (vals.price) {
          this.elements["btn_price"].self.css("display", "block");
          text = vals.price + " р. без рекламы";
          if (price_loc_cnt > 1) {
            text = "от " + text;
          }
          this.elements["price"].self.text(text);
        }
        if (!vals.price || vals.hasFree) {
          btn_cls = "btn-free";
          btn_text = "Смотреть<br/>бесплатно";
        }
      } else {
        btn_cls = "btn-subscribe";
        btn_text = "Подписаться";
        this.elements["btn"].self.click((function(_this) {
          return function() {
            return _this.toggle_subscribe();
          };
        })(this));
      }
      if (vals.relation && vals.relation.rating) {
        this.elements["relation.rating"].self.rateit().rateit("value", vals.relation.rating);
      }
      this.elements["btn"].self.removeClass("btn-subscribe").removeClass("btn-price").removeClass("btn-free").addClass(btn_cls);
      this.elements["btn_text"].self.html(btn_text).css("display", "block");
      FilmThumb.__super__.set_vals.apply(this, arguments);
      if (!vals.hasFree && vals.price) {
        return this.elements["btn_text"].self.attr("href", this.elements["btn_text"].self.attr("href") + "#" + vals.price_loc);
      } else {
        this.elements["btn_text"].self.attr("href", this.elements["btn_text"].self.attr("href") + "#player");
        if (vals.price) {
          return this.elements["price"].self.parent().attr("href", this.elements["price"].self.parent().attr("href") + "#" + vals.price_loc);
        }
      }
    };

    FilmThumb.prototype.action_rate = function(val) {
      return this._app.film_action(this.vals.id, "rate", {
        rel: this.vals.relation,
        value: val,
        callback: (function(_this) {
          return function(new_state) {};
        })(this)
      });
    };

    FilmThumb.prototype.toggle_playlist = function(status) {
      this._app.film_action(this.vals.id, "playlist", {
        rel: this.vals.relation,
        state: status,
        callback: (function(_this) {
          return function(new_state) {};
        })(this)
      });
      if (document.location.pathname.slice(0, 9) === "/playlist" && typeof (this._app.page().conf.film.id) === 'undefined') {
        setTimeout(function() {
          return document.location.reload(true);
        }, 400);
      }
      return false;
    };

    FilmThumb.prototype.toggle_notwatch = function(status) {
      return this._app.film_action(this.vals.id, "notwatch", {
        rel: this.vals.relation,
        state: status,
        callback: (function(_this) {
          return function(new_state) {};
        })(this)
      });
    };

    FilmThumb.prototype.toggle_subscribe = function(status) {
      this._app.film_action(this.vals.id, "subscribe", {
        rel: this.vals.relation,
        state: status,
        callback: (function(_this) {
          return function(new_state) {};
        })(this)
      });
      return false;
    };

    FilmThumb.prototype.watchfilm = function() {
      return location.href = "/films/" + this.vals.id + "/";
    };

    return FilmThumb;

  })(Item);

  CommentThumb = (function(_super) {
    __extends(CommentThumb, _super);

    function CommentThumb(opts, callback) {
      if (opts == null) {
        opts = {};
      }
      this._name = "comment-thumb";
      if (opts.vals) {
        this.vals_orig = opts.vals;
      }
      CommentThumb.__super__.constructor.call(this, opts, (function(_this) {
        return function() {
          if (!opts.place) {
            return $(".time-tape", _this._place).data("miVal", _this.vals_orig.created);
          }
        };
      })(this));
    }

    CommentThumb.prototype.transform_attr = function(attr, name, val) {
      if (attr === "href" && name === "user.id") {
        return "/users/" + val + "/";
      }
      return CommentThumb.__super__.transform_attr.apply(this, arguments);
    };

    CommentThumb.prototype.transform_val = function(name, val) {
      if (name === "user.name") {
        return val || "Пользователь";
      }
      if (name === "text") {
        return val.replace(/\n+/gm, "<br/>");
      }
      return CommentThumb.__super__.transform_val.apply(this, arguments);
    };

    return CommentThumb;

  })(Item);

  PersonThumb = (function(_super) {
    __extends(PersonThumb, _super);

    function PersonThumb(opts, callback) {
      if (opts == null) {
        opts = {};
      }
      this._name = "person-thumb";
      PersonThumb.__super__.constructor.apply(this, arguments);
    }

    PersonThumb.prototype.transform_attr = function(attr, name, val) {
      if (attr === "href" && name === "id") {
        return "/persons/" + val + "/";
      } else {
        return PersonThumb.__super__.transform_attr.apply(this, arguments);
      }
    };

    return PersonThumb;

  })(Item);

  FeedThumb = (function(_super) {
    __extends(FeedThumb, _super);

    function FeedThumb(opts, callback) {
      if (opts == null) {
        opts = {};
      }
      this._name = "feed-thumb";
      if (opts.vals) {
        this._type = opts.vals.type;
        this.vals_orig = opts.vals;
      }
      FeedThumb.__super__.constructor.call(this, opts, (function(_this) {
        return function() {
          if (!opts.place) {
            $(".tape-" + _this._type, _this._place).removeClass("tape-thumb");
            $(".tape-thumb", _this._place).remove();
            $(".time-tape", _this._place).data("miVal", _this.vals_orig.created);
            _this._place.removeClass("display-none");
            if (_this._type === "film-r") {
              return _this.elements["object.rating"].self.rateit().rateit("value", opts.vals.object.rating);
            }
          }
        };
      })(this));
    }

    FeedThumb.prototype.transform_val = function(name, val) {
      if (name === "user.name") {
        return val || "Пользователь";
      } else if (this._type === "film-c" && name === "object.text") {
        return val.replace(/\n+/gm, "<br/>");
      }
      return FeedThumb.__super__.transform_val.apply(this, arguments);
    };

    FeedThumb.prototype.transform_attr = function(attr, name, val) {
      var type;
      type = this._type;
      if (type.substr(0, 4) === "film") {
        if (name === "object.id" || name === 'object.film.id' && (attr = "href")) {
          return "/films/" + val + "/";
        }
        if (name === "object.name") {
          return val + " (" + this.vals_orig.object.releasedate.substr(0, 4) + ")";
        }
      }
      if (type.substr(0, 4) === "pers" && (attr = "href")) {
        if (name === "object.id") {
          return "/persons/" + val + "/";
        } else if (name === "object.film.id") {
          return "/films/" + val + "/";
        }
      }
      if (type.substr(0, 4) === "user" && (attr = "href")) {
        if (name === "object.id") {
          return "/users/" + val + "/";
        }
      }
      if (name === "user.id" && (attr = "href")) {
        return "/users/" + val + "/";
      }
      if (name === "created") {
        try {
          return time_text(new Date(val));
        } catch (_error) {
          return val;
        }
      }
      return FeedThumb.__super__.transform_attr.apply(this, arguments);
    };

    return FeedThumb;

  })(Item);

  CastThumb = (function(_super) {
    __extends(CastThumb, _super);

    function CastThumb(opts, callback) {
      if (opts == null) {
        opts = {};
      }
      this.action_subscribe = __bind(this.action_subscribe, this);
      this._name = "cast-thumb";
      if (opts.vals) {
        this._type = opts.vals.type;
        this.vals_orig = opts.vals;
        opts.vals.start_date = new Date(opts.vals.start);
        opts.vals.min_vs_start = opts.vals.min_vs_start = Math.floor((new Date() - opts.vals.start_date) / 60 / 1000);
        opts.vals.duration = opts.vals.duration || 180;
        opts.vals.is_online = opts.vals.min_vs_start >= 0 && opts.vals.min_vs_start < opts.vals.duration;
      }
      CastThumb.__super__.constructor.call(this, opts, (function(_this) {
        return function() {
          var label_fright_cls, label_fright_str, label_prim_cls, label_prim_str;
          if (!opts.place) {
            label_prim_str = '';
            label_prim_cls = 'label-primary';
            label_fright_str = '';
            label_fright_cls = '';
            if (_this.vals.is_online) {
              label_prim_str = "Онлайн";
              label_prim_cls = 'label-success';
              _this.elements["btn"].self.show().addClass("btn-free").html("Смотреть<br/>бесплатно");
            } else if (_this.vals.min_vs_start < 0) {
              if (_this.vals.min_vs_start > -1440) {
                label_prim_str = '';
                if (_this.vals.min_vs_start > -60) {
                  label_prim_str = "примерно ";
                }
                label_prim_str += 'через ' + duration_text(-_this.vals.min_vs_start);
              } else {
                label_prim_str = time_text(_this.vals.start_date);
              }
              _this.elements["btn"].self.show().addClass("btn-subscribe").text("Подписаться");
              _this.elements["btn"].self.click(_this.action_subscribe);
            } else {
              label_fright_str = time_text(_this.vals.start_date);
              label_fright_cls = 'cast-archive-date';
              label_prim_str = 'Архив';
            }
            _this.elements["label_prim"].self.removeClass("label-primary").addClass(label_prim_cls).text(label_prim_str);
            return _this.elements["label_fright"].self.addClass(label_fright_cls).text(label_fright_str);
          }
        };
      })(this));
    }

    CastThumb.prototype.transform_attr = function(attr, name, val) {
      if (attr === "href" && name === "id") {
        return "/casts/" + val + "/";
      } else {
        return CastThumb.__super__.transform_attr.apply(this, arguments);
      }
    };

    CastThumb.prototype.transform_val = function(name, val) {
      if (name === "pg_rating") {
        return typeof val === "function" ? val(" (" + val + {
          ")": ""
        }) : void 0;
      }
      return CastThumb.__super__.transform_val.apply(this, arguments);
    };

    CastThumb.prototype.action_subscribe = function() {
      this._app.cast_action(this.vals.id, "subscribe");
      return false;
    };

    return CastThumb;

  })(Item);

  Deck = (function() {
    function Deck(_place, opts) {
      var self;
      this._place = _place;
      if (opts == null) {
        opts = {};
      }
      this.load_counter = 0;
      this.page = 0;
      this.load_func = void 0;
      this.items = [];
      this.more = {};
      this.save_footer = false;
      self = this;
      $("." + this.element_name, this._place).each(function() {
        return self.add_item_DOM($(this));
      });
      if (opts.load_func) {
        this.load_func = opts.load_func;
      }
      if (opts.more_place) {
        this.load_more_bind(opts.more_place);
      }
    }

    Deck.prototype.onchange = function() {};

    Deck.prototype.add_item_DOM = function(obj) {
      this.items.push(new this.item_class({
        place: obj,
        do_not_set: true
      }));
      return this.onchange();
    };

    Deck.prototype.add_item = function(item, onchange_call, up) {
      if (onchange_call == null) {
        onchange_call = true;
      }
      if (up == null) {
        up = false;
      }
      this.items.push(new this.item_class({
        parent: this._place,
        vals: item,
        up: up
      }));
      if (onchange_call) {
        return this.onchange();
      }
    };

    Deck.prototype.add_items = function(items) {
      var item, _i, _len;
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        this.add_item(item, false);
      }
      if (this.save_footer) {
        this.save_footer = false;
        this._place.removeClass("loading").css("min-height", 0);
      }
      return this.onchange();
    };

    Deck.prototype.get_items = function() {
      return this.items;
    };

    Deck.prototype.load_more_bind = function(place) {
      this.more.place = place;
      this.more.btn = $("a", place);
      return this.more.btn.click((function(_this) {
        return function() {
          _this.load_more();
          return false;
        };
      })(this));
    };

    Deck.prototype.load_more = function(opts) {
      if (this.load_func !== void 0) {
        this.load_counter++;
        return this.load_func(this, opts);
      }
    };

    Deck.prototype.load_more_hide = function(loading) {
      if (loading == null) {
        loading = true;
      }
      if (loading) {
        return this.more.place.addClass("add-filter-loading");
      } else {
        if (this.more.place) {
          return this.more.place.hide();
        }
      }
    };

    Deck.prototype.load_more_show = function() {
      if (this.more.place) {
        return this.more.place.removeClass("add-filter-loading").show();
      }
    };

    Deck.prototype.clear = function(loading_more) {
      var item, pH, pTop, wH, wScrollTop, _i, _len, _ref;
      if (loading_more == null) {
        loading_more = true;
      }
      this.load_counter++;
      if (loading_more) {
        pTop = this._place.offset().top;
        wScrollTop = $(window).scrollTop();
        wH = $(window).height();
        pH = this._place.height();
        if ((pTop - wScrollTop + pH) >= wH) {
          this.save_footer = true;
          this._place.css("min-height", wH - pTop + wScrollTop).addClass("loading");
        }
      }
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        item.remove();
      }
      this.items = [];
      this._place.empty();
      this.page = 0;
      return this.onchange(true);
    };

    return Deck;

  })();

  CommentsDeck = (function(_super) {
    __extends(CommentsDeck, _super);

    function CommentsDeck(place, opts) {
      if (opts == null) {
        opts = {};
      }
      this.element_name = "comment-thumb";
      this.item_class = CommentThumb;
      CommentsDeck.__super__.constructor.apply(this, arguments);
      setInterval((function(_this) {
        return function() {
          return _this.time_update();
        };
      })(this), 5000);
      this.time_update();
    }

    CommentsDeck.prototype.time_update = function() {
      return $(".time-tape", this._place).each(function() {
        var $this;
        $this = $(this);
        if ($this._failed) {
          return;
        }
        if (!$this._datetime) {
          try {
            $this._datetime = new Date($this.data("miVal"));
          } catch (_error) {
            $this._failed = true;
            return;
          }
        }
        return $this.text(time_text($this._datetime));
      });
    };

    CommentsDeck.prototype.onchange = function() {
      return this.time_update();
    };

    return CommentsDeck;

  })(Deck);

  FeedDeck = (function(_super) {
    __extends(FeedDeck, _super);

    function FeedDeck(place, opts) {
      if (opts == null) {
        opts = {};
      }
      this.element_name = "feed-thumb";
      this.item_class = FeedThumb;
      FeedDeck.__super__.constructor.apply(this, arguments);
      setInterval((function(_this) {
        return function() {
          return _this.time_update();
        };
      })(this), 1000);
      this.time_update();
    }

    FeedDeck.prototype.time_update = function() {
      $(".time-tape", this._place).each(function() {
        var $this;
        $this = $(this);
        if ($this._failed) {
          return;
        }
        if (!$this._datetime) {
          try {
            $this._datetime = new Date($this.data("miVal"));
          } catch (_error) {
            $this._failed = true;
            return;
          }
        }
        return $this.text(time_text($this._datetime));
      });
    };

    return FeedDeck;

  })(Deck);

  FilmsDeck = (function(_super) {
    __extends(FilmsDeck, _super);

    function FilmsDeck(place, opts) {
      if (opts == null) {
        opts = {};
      }
      this.element_name = "film-thumb";
      this.item_class = FilmThumb;
      FilmsDeck.__super__.constructor.apply(this, arguments);
      $(window).resize((function(_this) {
        return function() {
          return _this.onchange();
        };
      })(this));
    }

    FilmsDeck.prototype.onchange = function(global) {
      var body_width, el, i, items_inrow, _i, _ref, _results;
      if (global == null) {
        global = false;
      }
      body_width = $("body").width();
      if (body_width > 991) {
        items_inrow = 4;
      } else if (body_width > 767) {
        items_inrow = 3;
      } else {
        items_inrow = 2;
      }
      if (this.current_items_inrow !== items_inrow) {
        global = true;
      }
      this.current_items_inrow = items_inrow;
      if (global === true) {
        $("hr", this._place).remove();
      }
      _results = [];
      for (i = _i = 0, _ref = this.items.length - 1; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if ((i + 1) % items_inrow === 0) {
          el = this.items[i].place();
          if (!el.next().is("hr")) {
            _results.push($("<hr />").insertAfter(el));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return FilmsDeck;

  })(Deck);

  CastsDeck = (function(_super) {
    __extends(CastsDeck, _super);

    function CastsDeck(place, opts) {
      if (opts == null) {
        opts = {};
      }
      this.element_name = "cast-thumb";
      this.item_class = CastThumb;
      CastsDeck.__super__.constructor.apply(this, arguments);
      $(window).resize((function(_this) {
        return function() {
          return _this.onchange();
        };
      })(this));
    }

    CastsDeck.prototype.onchange = function(global) {
      var body_width, el, i, items_inrow, _i, _ref, _results;
      if (global == null) {
        global = false;
      }
      body_width = $("body").width();
      if (body_width > 991) {
        items_inrow = 4;
      } else if (body_width > 767) {
        items_inrow = 3;
      } else {
        items_inrow = 2;
      }
      if (this.current_items_inrow !== items_inrow) {
        global = true;
      }
      this.current_items_inrow = items_inrow;
      if (global === true) {
        $("hr", this._place).remove();
      }
      _results = [];
      for (i = _i = 0, _ref = this.items.length - 1; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if ((i + 1) % items_inrow === 0) {
          el = this.items[i].place();
          if (!el.next().is("hr")) {
            _results.push($("<hr />").insertAfter(el));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return CastsDeck;

  })(Deck);

  PersonsDeck = (function(_super) {
    __extends(PersonsDeck, _super);

    function PersonsDeck(place, opts) {
      this.element_name = "person-thumb";
      this.item_class = PersonThumb;
      PersonsDeck.__super__.constructor.apply(this, arguments);
    }

    return PersonsDeck;

  })(Deck);

  App = (function() {
    var active_page, conf, pages, query_params, templates, user;

    conf = window.mi_conf || {};

    user = {
      id: null,
      name: ""
    };

    templates = {};

    pages = {};

    active_page = void 0;

    query_params = void 0;

    function App(opts, name) {
      var current_url, q;
      if (opts == null) {
        opts = {};
      }
      if (name == null) {
        name = "Simple";
      }
      if (window.mi_app) {
        error("App is already running", "crit");
      }
      window.mi_app = this;
      if (!$.RestClient) {
        error("No Rest Library found");
      }
      $.extend(conf, opts);
      this.rest = new $.RestClient(conf.api_url);
      this.rest.add("user");
      this.rest.add("users");
      this.rest.users.add("films");
      this.rest.users.add("persons");
      this.rest.users.add("friendship");
      this.rest.users.add("friends");
      this.rest.users.add("feed");
      this.rest.add("films");
      this.rest.films.add("search");
      this.rest.films.add("persons");
      this.rest.films.add("comments");
      this.rest.films.add("action", {
        isSingle: true
      });
      this.rest.films.action.add("rate");
      this.rest.films.action.add("subscribe");
      this.rest.films.action.add("notwatch");
      this.rest.films.action.add("playlist");
      this.rest.films.action.add("comment");
      this.rest.add("persons");
      this.rest.persons.add("filmography", {
        isSingle: true
      });
      this.rest.persons.add("action", {
        isSingle: true
      });
      this.rest.persons.action.add("subscribe");
      this.rest.add("casts");
      this.rest.add("castschats");
      this.rest.castschats.add("msgs");
      this.rest.castschats.add("send");
      this.rest.casts.add("list");
      this.rest.casts.add("subscribe");
      this._e = {
        search: {
          frm: $("#frm_search")
        }
      };
      this._e.search.input = $(".inp-search", this._e.search.frm);
      this._e.search.btn = $(".btn-search", this._e.search.frm);
      q = this.query_params("q");
      if (q) {
        this._e.search.input.val(q);
      }
      this.auth_modal = $("#reg_enter");
      if (name !== void 0) {
        this.show_page(name, conf.page_conf);
      }
      $("#login_btn").click((function(_this) {
        return function(e) {
          e.preventDefault();
          e.stopPropagation();
          return _this.show_modal("login");
        };
      })(this));
      $("#reg_btn").click((function(_this) {
        return function(e) {
          e.preventDefault();
          e.stopPropagation();
          return _this.show_modal("reg");
        };
      })(this));
      current_url = window.location.href.toString().split(window.location.host)[1];
      $("form", this.auth_modal).each(function() {
        var $this, action;
        $this = $(this);
        action = $this.attr("action");
        if (/\?/.test(action)) {
          action += "&";
        } else {
          action += "?";
        }
        return $this.attr("action", action + "back_url=" + encodeURIComponent(current_url));
      });
      $("a", $(".soc-hor", this.auth_modal)).each(function() {
        var $this, href;
        $this = $(this);
        href = $this.attr("href");
        if (/\?/.test(href)) {
          href += "&";
        } else {
          href += "?";
        }
        return $this.attr("href", href + "next=" + encodeURIComponent("/tokenize/?back_url=" + current_url));
      });
    }

    App.prototype.show_modal = function(index) {
      if (index === void 0) {
        index = "reg";
      }
      if (index === "reg") {
        $('.popup-tabs-a >li, .popup-content > div', this.auth_modal).removeClass('active');
        $('.popup-tabs-a >li:eq(0), .popup-content > div:eq(0)', this.auth_modal).addClass('active');
      } else {
        $('.popup-tabs-a >li, .popup-content > div').removeClass('active');
        $('.popup-tabs-a >li:eq(1), .popup-content > div:eq(1)', this.auth_modal).addClass('active');
      }
      return this.auth_modal.modal("show");
    };

    App.prototype.user_action = function(id, action, opts) {
      var action_str, doit, new_state, rel;
      if (opts == null) {
        opts = {};
      }
      if (this.user_is_auth()) {
        rel = opts.rel || {};
        action_str = action;
        if (action_str === "friendship") {
          new_state = state_toggle(opts.status, rel[action_str]);
          if (new_state) {
            doit = "update";
          } else {
            doit = "destroy";
          }
          return this.rest.users.action[action][doit](id).done(function() {
            if (opts.rel) {
              rel[action_str] = new_state;
            }
            if (opts.callback) {
              return opts.callback(new_state);
            }
          });
        }
      }
    };

    App.prototype.film_action = function(id, action, opts) {
      var action_str, doit, new_state, rel;
      if (opts == null) {
        opts = {};
      }
      if (this.user_is_auth()) {
        rel = opts.rel || {};
        action_str = action;
        if (action === "subscribe") {
          action_str += "d";
        }
        new_state = state_toggle(opts.status, rel[action_str]);
        if (action === "rate") {
          if (!opts.value) {
            return this.rest.films.action.rate.destroy(id).done(function() {
              if (opts.rel) {
                rel.rating = false;
              }
              if (opts.callback) {
                return opts.callback(false);
              }
            });
          } else {
            return this.rest.films.action.rate.update(id, {
              rating: opts.value
            }).done(function() {
              if (opts.rel) {
                rel.rating = false;
              }
              if (opts.callback) {
                return opts.callback(opts.value);
              }
            });
          }
        } else if (action === "comment") {
          return this.rest.films.action.comment.update(id, {
            text: opts.text
          }).done(function() {
            if (opts.callback) {
              return opts.callback(true);
            }
          }).fail(function() {
            if (opts.callback) {
              return opts.callback(false);
            }
          });
        } else {
          if (new_state) {
            doit = "update";
          } else {
            doit = "destroy";
          }
          return this.rest.films.action[action][doit](id).done(function() {
            if (opts.rel) {
              rel[action_str] = new_state;
            }
            if (opts.callback) {
              return opts.callback(new_state);
            }
          });
        }
      }
    };

    App.prototype.person_action = function(id, action, opts) {
      var action_str, doit, new_state, rel;
      if (opts == null) {
        opts = {};
      }
      if (this.user_is_auth()) {
        rel = opts.rel || {};
        action_str = action;
        if (action === "subscribe") {
          action_str += "d";
        }
        new_state = state_toggle(opts.status, rel[action_str]);
        if (new_state) {
          doit = "update";
        } else {
          doit = "destroy";
        }
        return this.rest.persons.action[action][doit](id).done(function() {
          if (opts.rel) {
            rel[action_str] = new_state;
          }
          if (opts.callback) {
            return opts.callback(new_state);
          }
        });
      }
    };

    App.prototype.cast_action = function(id, action, opts) {
      if (opts == null) {
        opts = {};
      }
      if (this.user_is_auth()) {
        if (action === "subscribe") {
          return this.rest.casts.subscribe.create(id);
        }
      }
    };

    App.prototype.config = function(name) {
      if (name === void 0) {
        return conf;
      } else {
        return conf[name];
      }
    };

    App.prototype.user_is_auth = function(ask_sign_in) {
      if (ask_sign_in == null) {
        ask_sign_in = true;
      }
      if (!this.rest.has_auth()) {
        if (ask_sign_in) {
          this.auth_modal.modal("show");
        }
        return false;
      } else {
        return true;
      }
    };

    App.prototype.query_params = function(name) {
      if (!query_params) {
        query_params = $.parseParams();
      }
      if (name) {
        return query_params[name];
      } else {
        return query_params;
      }
    };

    App.prototype.get_tpl = function(name, callback) {
      var ajax_opts;
      if (templates[name]) {
        if (callback) {
          return callback(templates[name]);
        }
      } else {
        ajax_opts = {
          url: this.config("tpl_url") + name + ".html",
          dataType: "html",
          error: function() {
            error("Unable to load template name \"" + name + "\"");
            if (callback) {
              return callback(void 0);
            }
          },
          success: (function(_this) {
            return function(data) {
              if (callback) {
                return callback(templates[name] = $(data));
              }
            };
          })(this)
        };
        return $.ajax(ajax_opts);
      }
    };

    App.prototype.register_tpl = function(name, jObj) {
      return templates[name] = jObj;
    };

    App.prototype.hide_page = function(name) {
      if (!_pages[name]) {
        if (active_page === name) {
          pages[name].hide();
          return active_page = void 0;
        } else {
          return error("Page " + name + " is not active");
        }
      } else {
        return error("No page " + name + " found");
      }
    };

    App.prototype.show_page = function(name, conf) {
      var p;
      p = this.page(name, conf);
      if (p) {
        active_page = name;
        return p.show();
      } else {
        return error("No page " + name + "found");
      }
    };

    App.prototype.active_page = function() {
      return active_page;
    };

    App.prototype.page = function(name, conf) {
      var page_obj;
      if (name === void 0) {
        name = active_page;
      }
      if (pages[name]) {
        return pages[name];
      }
      page_obj = new (eval("Page_" + name))(conf);
      return pages[name] = page_obj;
    };

    return App;

  })();

  Page_Simple = (function(_super) {
    __extends(Page_Simple, _super);

    function Page_Simple() {
      return Page_Simple.__super__.constructor.apply(this, arguments);
    }

    return Page_Simple;

  })(Page);

  Page_Search = (function(_super) {
    var films, self;

    __extends(Page_Search, _super);

    films = void 0;

    self = void 0;

    function Page_Search(conf) {
      var films_deck;
      this.conf = conf;
      Page_Search.__super__.constructor.apply(this, arguments);
      self = this;
      this._app.get_tpl("film-thumb");
      films_deck = new FilmsDeck($("#films"), {
        load_func: this.load_more_films
      });
      films_deck.page = 1;
      films_deck.load_more_bind($("#films_more"));
    }

    Page_Search.prototype.load_more_films = function(deck, opts) {
      var current_counter, params;
      if (opts == null) {
        opts = {};
      }
      deck.load_more_hide();
      params = {
        text: self.conf.search_text || "",
        page: deck.page + 1
      };
      current_counter = deck.load_counter;
      return self._app.rest.films.read("search", params).done((function(_this) {
        return function(data) {
          if (current_counter !== deck.load_counter) {
            return;
          }
          if (data.items) {
            deck.add_items(data.items);
            if (data.items.length >= 12) {
              deck.load_more_show(false);
            } else {
              deck.load_more_hide(false);
            }
            deck.page = data.page;
          }
          if (opts.callback) {
            return opts.callback();
          }
        };
      })(this)).fail((function(_this) {
        return function(data) {};
      })(this));
    };

    return Page_Search;

  })(Page);

  Page_Main = (function(_super) {
    var films_deck, self, _filter_counter, _filter_params;

    __extends(Page_Main, _super);

    films_deck = void 0;

    self = void 0;

    _filter_params = {};

    _filter_counter = 0;

    function Page_Main() {
      var params;
      self = this;
      Page_Main.__super__.constructor.apply(this, arguments);
      this._app.get_tpl("film-thumb");
      films_deck = new FilmsDeck($("#films"), {
        load_func: (function(_this) {
          return function(deck) {
            return _this.load_more_films(deck);
          };
        })(this)
      });
      films_deck.load_more_bind($("#films_more"));
      $(".film-thumb", $("#films_new")).each(function() {
        return new FilmThumb({
          place: $(this),
          do_not_set: true
        });
      });
      this._e.filter = {
        genre: $("#filter_genres"),
        year_old: $("#filter_year_old"),
        rating: $("#filter_rating"),
        price: $("#filter_price"),
        sort: $("#filter_sort")
      };
      params = this._app.query_params();
      params["price"] = (params["price"] || "") + "|";
      if (params["instock"]) {
        params["price"] += params["instock"];
      }
      $.each(this._e.filter, function(index) {
        var el;
        el = this;
        el._title = $(".sprite > span", el);
        el._selected = void 0;
        el._options = [];
        $(".dropdown-menu a", el).each(function() {
          var $this;
          $this = $(this);
          $this._val = $this.data("miId");
          $this._text = $this.text();
          el._options.push($this);
          $this.click(function() {
            if (el._selected !== $this) {
              el._selected = $this;
              el._title.text($this._text);
              self.filter_changed();
            }
            el.removeClass("open");
            return false;
          });
          if (params[index] && ($this._val === void 0 || (params[index].toString() === $this._val.toString()))) {
            el._selected = $this;
            return el._title.text($this._text);
          }
        });
        if (el._selected === void 0) {
          el._selected = el._options[0];
          return el._title.text(el._options[0]._text);
        }
      });
      this.update_filter_params(false);
      if (films_deck.get_items().length >= 12) {
        this.load_more_films(films_deck, {
          page: 2
        });
      } else {
        films_deck.load_more_hide(false);
      }
      $('.crsl-items').carousel({
        itemMinWidth: 200,
        itemEqualHeight: true,
        visible: 3
      });
    }

    Page_Main.prototype.filter_changed = function(text) {
      var current_filter_counter;
      _filter_counter++;
      if (text !== void 0) {
        _filter_params.text = text;
      }
      current_filter_counter = _filter_counter;
      return setTimeout((function(_this) {
        return function() {
          var opts;
          if (_filter_counter === current_filter_counter) {
            _this.update_filter_params();
            opts = {
              clear_output: true,
              page_loading: false,
              params: _filter_params
            };
            return _this.load_more_films(films_deck, opts);
          }
        };
      })(this), this._app.config("filter_delay"));
    };

    Page_Main.prototype.update_filter_params = function(update_href) {
      var el, key, more_btn_href, page, query_string, val, vals, _ref;
      if (update_href == null) {
        update_href = true;
      }
      query_string = "";
      _ref = this._e.filter;
      for (key in _ref) {
        el = _ref[key];
        val = el._selected._val;
        if (key === "price") {
          vals = val.split("|");
          if (vals[0] || vals[0] === "0") {
            _filter_params["price"] = vals[0];
            if (query_string) {
              query_string += "&";
            }
            query_string += "price=" + vals[0];
          } else {
            _filter_params["price"] = null;
          }
          if (vals[1] || vals[1] === "0") {
            _filter_params["instock"] = vals[1];
            if (query_string) {
              query_string += "&";
            }
            query_string += "instock=" + vals[1];
          } else {
            _filter_params["instock"] = null;
          }
        } else {
          if (val && val !== "0") {
            _filter_params[key] = val;
            if (query_string) {
              query_string += "&";
            }
            query_string += key + "=" + val;
          } else {
            _filter_params[key] = null;
          }
        }
      }
      page = films_deck.page || 1;
      _filter_params.page = page;
      more_btn_href = "/?" + query_string + "page=" + (page + 1);
      if (query_string) {
        query_string = "?" + query_string;
      }
      if (update_href) {
        if (history && history.pushState) {
          history.pushState(null, null, query_string);
        }
        return $("a", $("#films_more")).attr("href", more_btn_href);
      }
    };

    Page_Main.prototype.load_more_films = function(deck, opts) {
      var current_counter, params;
      if (opts == null) {
        opts = {};
      }
      deck.load_more_hide();
      params = $.extend(_filter_params, opts.params || {});
      if (this.user_is_auth(false)) {
        params["recommend"] = 1;
      }
      if (opts.clear_output) {
        deck.clear(false);
        params.page = 1;
      } else {
        params.page = opts.page || (deck.page + 1);
      }
      current_counter = deck.load_counter;
      return self._app.rest.films.read("search", params).done((function(_this) {
        return function(data) {
          if (current_counter !== deck.load_counter) {
            return;
          }
          if (data.items) {
            deck.add_items(data.items);
            if (data.items.length >= 12) {
              deck.load_more_show();
            } else {
              deck.load_more_hide(false);
            }
            deck.page = data.page;
            if (opts.clear_output) {
              scroll_to_obj($("#filter_content"));
            }
          } else {
            deck.load_more_hide(false);
          }
          _this.update_filter_params();
          if (opts.callback) {
            return opts.callback();
          }
        };
      })(this)).fail((function(_this) {
        return function(data) {
          return deck.load_more_hide(false);
        };
      })(this));
    };

    return Page_Main;

  })(Page);

  Page_Login = (function(_super) {
    __extends(Page_Login, _super);

    function Page_Login() {
      return Page_Login.__super__.constructor.apply(this, arguments);
    }

    return Page_Login;

  })(Page);

  Page_Register = (function(_super) {
    __extends(Page_Register, _super);

    function Page_Register() {
      return Page_Register.__super__.constructor.apply(this, arguments);
    }

    Page_Register.constructor = function() {
      Page_Register.__super__.constructor.constructor.apply(this, arguments);
      return $("#frm_reg").submit(function() {
        return false;
      });
    };

    return Page_Register;

  })(Page);

  Page_Film = (function(_super) {
    var actors_deck, comments_deck, film_id, films_deck, locations, params;

    __extends(Page_Film, _super);

    film_id = void 0;

    films_deck = void 0;

    comments_deck = void 0;

    actors_deck = void 0;

    locations = {};

    params = void 0;

    function Page_Film(conf) {
      var item, key, loc_id, loc_price, loc_price_id, self;
      this.conf = conf;
      Page_Film.__super__.constructor.apply(this, arguments);
      films_deck = new FilmsDeck($("#films"));
      comments_deck = new CommentsDeck($("#comments"), {
        load_func: (function(_this) {
          return function() {
            return _this.load_more_comments();
          };
        })(this)
      });
      comments_deck.load_more_bind($("#comments_more"));
      actors_deck = new PersonsDeck($("#actors"), {
        load_func: (function(_this) {
          return function() {
            return _this.load_all_actors();
          };
        })(this)
      });
      actors_deck.load_more_bind($("#actors_more"));
      this._e.rateit = $("#rateit");
      this._e.rateit.bind("beforerated beforereset", (function(_this) {
        return function(event) {
          if (!_this.user_is_auth()) {
            return event.preventDefault();
          }
        };
      })(this)).bind("rated", (function(_this) {
        return function(event) {
          return _this.action_rate(_this._e.rateit.rateit("value"));
        };
      })(this)).bind("reset", (function(_this) {
        return function(event) {
          return _this.action_notwatch_toggle();
        };
      })(this)).bind("over", function(event, value) {
        return $(this).attr('title', stars_tootltips[value]);
      });
      if (this.conf.relation && this.conf.relation.rating) {
        this._e.rateit.rateit("value", this.conf.relation.rating);
      }
      this._e.playlist_btn = $("#playlist_btn");
      if (this._e.playlist_btn.length) {
        this._e.playlist_btn.bind("click", (function(_this) {
          return function() {
            return _this.action_playlist_toggle();
          };
        })(this));
      }
      this._e.subscribe_btn = $("#subscribe_btn");
      if (this._e.subscribe_btn.length) {
        this._e.subscribe_btn.bind("click", (function(_this) {
          return function() {
            return _this.action_subscribe_toggle();
          };
        })(this));
      }
      this._e.add_comment = {};
      this._e.add_comment.place = $("#add_comment");
      this._e.add_comment.submit_btn = $("input[type=submit]", this._e.add_comment.place);
      this._e.add_comment.textarea_wrapper = $("#comment_textarea_wrapper");
      this._e.add_comment.textarea_error = $("p", this._e.add_comment.textarea_wrapper);
      if (this._e.add_comment.submit_btn.size()) {
        $("form", this._e.add_comment.place).submit((function(_this) {
          return function() {
            _this.add_comment();
            return false;
          };
        })(this));
        this._e.add_comment.text = $("textarea", this._e.add_comment.place);
      } else {
        $(".login", this._e.add_comment.place).click((function(_this) {
          return function() {
            _this._app.show_modal("login");
            return false;
          };
        })(this));
        $(".register", this._e.add_comment.place).click((function(_this) {
          return function() {
            _this._app.show_modal("reg");
            return false;
          };
        })(this));
      }
      self = this;
      if (this.conf.locations && this.conf.locations.length) {
        if (this.conf.locations.length > 1) {
          $(".location-thumb", $("#locations")).each(function() {
            var $this, i, id, loc;
            $this = $(this);
            id = $this.data("miVal");
            i = 0;
            loc = void 0;
            while (i < self.conf.locations.length && self.conf.locations[i].id !== id) {
              i++;
            }
            if (i < self.conf.locations.length) {
              loc = self.conf.locations[i];
            }
            if (loc) {
              if (loc.price) {
                loc.price = Math.ceil(loc.price);
              }
              $this.click(function() {
                return self.play_location(id);
              });
              return locations[id] = loc;
            }
          });
        } else {
          locations[this.conf.locations[0].id] = this.conf.locations[0];
        }
        this.player = new Player($("#frame_player"));
        this.player.clear();
        loc_id = window.location.hash.substr(1);
        if (locations[loc_id] === void 0) {
          loc_id = void 0;
          loc_price = false;
          loc_price_id = false;
          for (key in locations) {
            item = locations[key];
            if (item.price_type === 0) {
              if (!loc_id) {
                loc_id = key;
              }
            } else {
              if (item.type === "playfamily" || loc_price_id === false || loc_price === false || loc_price > item.price) {
                loc_price_id = item.id;
                loc_price = item.price;
                if (item.type === "playfamily") {
                  loc_price = 1;
                }
              }
            }
          }
        }
        if (!loc_id) {
          loc_id = loc_price_id;
        }
        if (loc_id) {
          this.play_location(loc_id, false);
        }
      }
    }

    Page_Film.prototype.load_more_comments = function() {
      comments_deck.load_more_hide();
      return this._app.rest.films.comments.read(this.conf.id, {
        page: (comments_deck.page || 1) + 1
      }).done(function(data) {
        var total_page_count;
        total_page_count = Math.ceil(data.total_cnt / data.ipp);
        if (data && data.items) {
          comments_deck.add_items(data.items);
          comments_deck.time_update();
          comments_deck.page = data.page;
          if (data.page < total_page_count) {
            return comments_deck.load_more_show();
          } else {
            return comments_deck.load_more_hide(false);
          }
        } else {
          return comments_deck.load_more_hide(false);
        }
      }).fail(function() {
        return comments_deck.load_more_hide(false);
      });
    };

    Page_Film.prototype.add_comment = function() {
      var text;
      text = this._e.add_comment.text.val();
      this._e.add_comment.textarea_wrapper.removeClass("has-error");
      this._e.add_comment.textarea_error.text("");
      error = false;
      if (text === "") {
        error = "Введите, пожалуйста, текст комментария.";
      } else if (text.length < 20) {
        error = "Количество букв в тексте не должно быть меньше 20.";
      } else if (text.length > 8000) {
        error = "Количество букв в тексте не должно превышать 8000.";
      } else {
        this._e.add_comment.text.attr("disabled", "disabled");
        this._e.add_comment.submit_btn.attr("disabled", "disabled");
        this._app.film_action(this.conf.id, "comment", {
          text: text,
          callback: (function(_this) {
            return function(result) {
              _this._e.add_comment.text.removeAttr("disabled");
              _this._e.add_comment.submit_btn.removeAttr("disabled");
              if (result) {
                _this._e.add_comment.text.val("");
                return _this._app.rest.films.comments.read(_this.conf.id, {
                  per_page: 1,
                  page: 1
                }).done(function(res) {
                  var items_len;
                  if (res.items && res.items.length) {
                    $("#has_comments").show();
                    comments_deck.add_item(res.items[0], true, true);
                    items_len = comments_deck.items.length;
                    if (items_len) {
                      return $('body').animate({
                        scrollTop: comments_deck.items[items_len - 1]._place.offset().top
                      }, "slow");
                    }
                  }
                }).fail(function(res) {
                  error = "Не удалось сохранить комментарий.";
                  if (res.error && res.error.text) {
                    error = res.error.text;
                  }
                  _this._e.add_comment.textarea_wrapper.addClass("has-error");
                  _this._e.add_comment.textarea_error.text(error);
                  return _this._e.add_comment.text.focus();
                });
              }
            };
          })(this)
        });
      }
      if (error) {
        this._e.add_comment.textarea_wrapper.addClass("has-error");
        this._e.add_comment.textarea_error.text(error);
        return this._e.add_comment.text.focus();
      }
    };

    Page_Film.prototype.play_location = function(id, scroll) {
      if (scroll == null) {
        scroll = false;
      }
      if (locations[id]) {
        return this.player.load(locations[id], scroll);
      }
    };

    Page_Film.prototype.load_all_actors = function() {
      actors_deck.load_more_hide(false);
      this._app.rest.films.persons.read(this.conf.id, {
        type: "a",
        top: actors_deck.get_items().length
      }).done((function(_this) {
        return function(data) {
          if (data && data.length) {
            return actors_deck.add_items(data);
          }
        };
      })(this));
      actors_deck._place.appendTo($("#actors_full").removeClass("hide"));
      $("#actors_left").hide();
      return $("#toggle_col").removeClass("col-md-9");
    };

    Page_Film.prototype.action_rate = function(val) {
      return this._app.film_action(this.conf.id, "rate", {
        rel: this.conf.relation,
        value: val,
        callback: (function(_this) {
          return function(new_value) {};
        })(this)
      });
    };

    Page_Film.prototype.action_notwatch_toggle = function(status) {
      return this._app.film_action(this.conf.id, "notwatch", {
        state: status,
        rel: this.conf.relation,
        callback: (function(_this) {
          return function() {};
        })(this)
      });
    };

    Page_Film.prototype.action_subscribe_toggle = function(status) {
      this._app.film_action(this.conf.id, "subscribe", {
        state: status,
        rel: this.conf.relation,
        callback: (function(_this) {
          return function() {};
        })(this)
      });
      return false;
    };

    Page_Film.prototype.action_playlist_toggle = function(status) {
      this._app.film_action(this.conf.id, "playlist", {
        state: status,
        rel: this.conf.relation,
        callback: (function(_this) {
          return function() {};
        })(this)
      });
      return false;
    };

    return Page_Film;

  })(Page);

  Page_Person = (function(_super) {
    var films_deck;

    __extends(Page_Person, _super);

    films_deck = void 0;

    function Page_Person(conf) {
      this.conf = conf;
      Page_Person.__super__.constructor.apply(this, arguments);
      this._app.get_tpl("film-thumb");
      films_deck = new FilmsDeck($("#films"), {
        load_func: (function(_this) {
          return function(deck) {
            return _this.load_more_films(deck);
          };
        })(this)
      });
      films_deck.load_more_bind($("#films_more"));
      films_deck.page = 1;
      this._e.subscribe_btn = $("#subscribe").click((function(_this) {
        return function() {
          return _this.action_subscribe();
        };
      })(this));
    }

    Page_Person.prototype.action_subscribe = function(status) {
      this._app.person_action(this.conf.id, "subscribe", {
        rel: this.conf.relation,
        status: status,
        callback: (function(_this) {
          return function() {};
        })(this)
      });
      return false;
    };

    Page_Person.prototype.load_more_films = function(deck) {
      var current_counter;
      current_counter = deck.load_counter;
      deck.load_more_hide();
      return this._app.rest.persons.filmography.read(this.conf.id, {
        page: deck.page + 1
      }).done((function(_this) {
        return function(data) {
          if (current_counter !== deck.load_counter) {
            return;
          }
          if (data.items) {
            deck.add_items(data.items);
            if (data.items.length >= 12) {
              deck.load_more_show();
              return deck.page = data.page;
            } else {
              return deck.load_more_hide(false);
            }
          } else {
            return deck.load_more_hide(false);
          }
        };
      })(this)).fail((function(_this) {
        return function(data) {
          return deck.load_more_hide(false);
        };
      })(this));
    };

    return Page_Person;

  })(Page);

  Page_Playlist = (function(_super) {
    __extends(Page_Playlist, _super);

    function Page_Playlist(conf) {
      var film_page;
      this.conf = conf;
      Page_Playlist.__super__.constructor.apply(this, arguments);
      film_page = new Page_Film(this.conf.film);
      $('.toggle-playlist').click(function(e) {
        e.preventDefault();
        $(this).toggleClass('active');
        return $('.tp').slideToggle('slow', function() {
          if ($(this).is(':visible')) {
            return $('.toggle-playlist span').text('Скрыть плейлист');
          } else {
            return $('.toggle-playlist span').text('Показать плейлист');
          }
        });
      });
      $("#playlistof_btn").bind("click", (function(_this) {
        return function() {
          _this._app.film_action(_this.conf.film.id, "playlist", {
            status: false,
            rel: _this.conf.relation,
            callback: function() {
              if (_this.conf.next && _this.conf.next.id) {
                return location.href = "/playlist/" + _this.conf.id + "/";
              } else if (_this.conf.previous && _this.conf.previous.id) {
                return location.href = "/playlist/" + _this.conf.previous.id + "/";
              } else {
                return location.href = "/playlist/";
              }
            }
          });
          return false;
        };
      })(this));
      $('.crsl-items').carousel({
        itemMinWidth: 155,
        itemEqualHeight: true,
        visible: 6
      });
      this._app.get_tpl("person-thumb");
    }

    return Page_Playlist;

  })(Page);

  Page_Feed = (function(_super) {
    var feed_deck;

    __extends(Page_Feed, _super);

    feed_deck = void 0;

    function Page_Feed(conf) {
      this.conf = conf;
      Page_Feed.__super__.constructor.apply(this, arguments);
      feed_deck = new FeedDeck($("#feed"), {
        load_func: (function(_this) {
          return function(deck) {
            return _this.load_more_feed(deck);
          };
        })(this)
      });
      feed_deck.load_more_bind($("#feed_more"));
      feed_deck.page = 1;
      this._app.get_tpl("feed-thumb");
    }

    Page_Feed.prototype.load_more_feed = function(deck) {
      var current_counter;
      current_counter = deck.load_counter;
      deck.load_more_hide();
      return this._app.rest.users.feed.read(this.conf.user_id, {
        page: deck.page + 1
      }).done((function(_this) {
        return function(data) {
          if (current_counter !== deck.load_counter) {
            return;
          }
          if (data.items) {
            deck.add_items(data.items);
            if (data.items.length >= 10) {
              deck.load_more_show();
              return deck.page = data.page;
            } else {
              return deck.load_more_hide(false);
            }
          } else {
            return deck.load_more_hide(false);
          }
        };
      })(this)).fail((function(_this) {
        return function(data) {
          return deck.load_more_hide(false);
        };
      })(this));
    };

    return Page_Feed;

  })(Page);

  Page_Account = (function(_super) {
    __extends(Page_Account, _super);

    Page_Account.prototype.self = void 0;

    function Page_Account() {
      var self;
      Page_Account.__super__.constructor.apply(this, arguments);
      $('.checkbox-default').uniform();
      $('.radio-default').uniform({
        radioClass: 'radio-class'
      });
      this._e.pvt_selector = $("#pvt_selector");
      self = this;
      $("input:radio", this._e.pvt_selector).click(function() {
        var $this, val;
        $this = $(this);
        if (self._e.pvt_selector.active) {
          val = $this.val();
          self._e.pvt_selector.obj.text($(".value" + val, self._e.pvt_selector).text());
          return $("input").filter("[name=" + self._e.pvt_selector.active + "]").val(val);
        }
      });
      $("a", $("#pvt_list")).click(function(e) {
        e.preventDefault();
        return self.pvt_select_toggle($(this));
      });
    }

    Page_Account.prototype.pvt_select_toggle = function($this) {
      var name, val;
      name = $("input", $this.parent()).attr("name");
      if (this._e.pvt_selector.active === name) {
        this._e.pvt_selector.hide();
        return this._e.pvt_selector.active = void 0;
      } else {
        this._e.pvt_selector.insertAfter($this).show();
        this._e.pvt_selector.active = name;
        this._e.pvt_selector.obj = $this;
        val = $("input", $this.parent()).val();
        return $("input:radio", this._e.pvt_selector).each(function() {
          $this = $(this);
          return $.uniform.update($this.prop('checked', $this.val() === val));
        });
      }
    };

    return Page_Account;

  })(Page);

  Page_User = (function(_super) {
    var feed_deck, films_deck;

    __extends(Page_User, _super);

    films_deck = void 0;

    feed_deck = void 0;

    function Page_User(conf) {
      this.conf = conf;
      Page_User.__super__.constructor.apply(this, arguments);
      films_deck = new FilmsDeck($("#films"), {
        load_func: (function(_this) {
          return function(deck) {
            return _this.load_more_films(deck);
          };
        })(this)
      });
      films_deck.load_more_bind($("#films_more"));
      films_deck.page = 1;
      this._e.friendship_btn = $("#friendship").click((function(_this) {
        return function() {
          return _this.action_friendship();
        };
      })(this));
      feed_deck = new FeedDeck($("#feed"), {
        load_func: (function(_this) {
          return function(deck) {
            return _this.load_more_feed(deck);
          };
        })(this)
      });
      feed_deck.load_more_bind($("#feed_more"));
      feed_deck.page = 1;
      this._app.get_tpl("feed-thumb");
      this._app.get_tpl("film-thumb");
    }

    Page_User.prototype.action_friendship = function(status) {
      this._app.user_action(this.conf.id, "friendship", {
        rel: this.conf.relation,
        status: status,
        callback: (function(_this) {
          return function() {};
        })(this)
      });
      return false;
    };

    Page_User.prototype.load_more_films = function(deck) {
      var current_counter;
      current_counter = deck.load_counter;
      deck.load_more_hide();
      return this._app.rest.users.films.read(this.conf.id, {
        page: deck.page + 1
      }).done((function(_this) {
        return function(data) {
          if (current_counter !== deck.load_counter) {
            return;
          }
          if (data.items) {
            deck.add_items(data.items);
            if (data.items.length >= 12) {
              deck.load_more_show();
              return deck.page = data.page;
            } else {
              return deck.load_more_hide(false);
            }
          } else {
            return deck.load_more_hide(false);
          }
        };
      })(this)).fail((function(_this) {
        return function(data) {
          return deck.load_more_hide(false);
        };
      })(this));
    };

    Page_User.prototype.load_more_feed = function(deck) {
      var current_counter;
      current_counter = deck.load_counter;
      deck.load_more_hide();
      return this._app.rest.users.feed.read(this.conf.id, {
        page: deck.page + 1
      }).done((function(_this) {
        return function(data) {
          if (current_counter !== deck.load_counter) {
            return;
          }
          if (data.items) {
            deck.add_items(data.items);
            if (data.items.length >= 10) {
              deck.load_more_show();
              return deck.page = data.page;
            } else {
              return deck.load_more_hide(false);
            }
          } else {
            return deck.load_more_hide(false);
          }
        };
      })(this)).fail((function(_this) {
        return function(data) {
          return deck.load_more_hide(false);
        };
      })(this));
    };

    return Page_User;

  })(Page);

  Page_CastsList = (function(_super) {
    var casts_deck, self, _filter_counter, _filter_params;

    __extends(Page_CastsList, _super);

    casts_deck = void 0;

    self = void 0;

    _filter_params = {};

    _filter_counter = 0;

    function Page_CastsList() {
      var params;
      self = this;
      Page_CastsList.__super__.constructor.apply(this, arguments);
      casts_deck = new CastsDeck($("#casts"), {
        load_func: (function(_this) {
          return function(deck) {
            return _this.load_more_casts(deck);
          };
        })(this)
      });
      casts_deck.page = 1;
      casts_deck.load_more_hide(false);
      casts_deck.load_more_bind($("#casts_more"));
      this._e.filter = {
        status: $("#filter_cast_status"),
        tag: $("#filter_cast_tag"),
        quality: $("#filter_cast_quality"),
        price_high: $("#filter_cast_price")
      };
      params = this._app.query_params();
      $.each(this._e.filter, function(index) {
        var el;
        el = this;
        el._title = $(".sprite > span", el);
        el._selected = void 0;
        el._options = [];
        $(".dropdown-menu a", el).each(function() {
          var $this;
          $this = $(this);
          $this._val = $this.data("miId");
          $this._text = $this.text();
          el._options.push($this);
          $this.click(function() {
            if (el._selected !== $this) {
              el._selected = $this;
              el._title.text($this._text);
              self.filter_changed();
            }
            el.removeClass("open");
            return false;
          });
          if (params[index] && ($this._val === void 0 || (params[index].toString() === $this._val.toString()))) {
            el._selected = $this;
            return el._title.text($this._text);
          }
        });
        if (el._selected === void 0) {
          el._selected = el._options[0];
          return el._title.text(el._options[0]._text);
        }
      });
      this.update_filter_params(false);
    }

    Page_CastsList.prototype.filter_changed = function() {
      var current_filter_counter;
      _filter_counter++;
      current_filter_counter = _filter_counter;
      return setTimeout((function(_this) {
        return function() {
          var opts;
          if (_filter_counter === current_filter_counter) {
            _this.update_filter_params();
            opts = {
              clear_output: true,
              page_loading: false,
              params: _filter_params
            };
            return _this.load_more_casts(casts_deck, opts);
          }
        };
      })(this), this._app.config("filter_delay"));
    };

    Page_CastsList.prototype.load_more_casts = function(deck, opts) {
      var current_counter, params;
      if (opts == null) {
        opts = {};
      }
      deck.load_more_hide();
      params = $.extend(_filter_params, opts.params || {});
      if (opts.clear_output) {
        deck.clear(true);
        params.page = 1;
      } else {
        params.page = opts.page || (deck.page + 1);
      }
      current_counter = deck.load_counter;
      return self._app.rest.casts.read("list", params).done((function(_this) {
        return function(data) {
          if (current_counter !== deck.load_counter) {
            return;
          }
          if (data.items) {
            deck.add_items(data.items);
            if (data.items.length >= 12) {
              deck.load_more_show();
            } else {
              deck.load_more_hide(false);
            }
            deck.page = data.page;
            if (opts.clear_output) {
              scroll_to_obj($("#filter_content"));
            }
          } else {
            deck.load_more_hide(false);
          }
          _this.update_filter_params();
          if (opts.callback) {
            return opts.callback();
          }
        };
      })(this)).fail((function(_this) {
        return function(data) {
          return deck.load_more_hide(false);
        };
      })(this));
    };

    Page_CastsList.prototype.update_filter_params = function(update_href) {
      var el, key, more_btn_href, page, query_string, val, _ref;
      if (update_href == null) {
        update_href = true;
      }
      query_string = "";
      _ref = this._e.filter;
      for (key in _ref) {
        el = _ref[key];
        val = el._selected._val;
        if (val && val !== "0") {
          _filter_params[key] = val;
          if (query_string) {
            query_string += "&";
          }
          query_string += key + "=" + val;
        } else {
          _filter_params[key] = null;
        }
      }
      page = casts_deck.page || 1;
      _filter_params.page = page;
      more_btn_href = "/?" + query_string + "page=" + (page + 1);
      if (query_string) {
        query_string = "?" + query_string;
      }
      if (update_href) {
        if (history && history.pushState) {
          history.pushState(null, null, query_string);
        }
        return $("a", $("#casts_more")).attr("href", more_btn_href);
      }
    };

    return Page_CastsList;

  })(Page);

  Page_Cast = (function(_super) {
    __extends(Page_Cast, _super);

    function Page_Cast(conf) {
      var casts_deck, self;
      this.conf = conf;
      this.action_cast_subscribe = __bind(this.action_cast_subscribe, this);
      Page_Cast.__super__.constructor.apply(this, arguments);
      this.chat = {
        active: true,
        last_id: 0,
        guests: 0,
        counter: 0,
        attempts: [0, 0, 0],
        timeout: [2, 5, 10],
        attempts_pos: 0
      };
      this._e = {
        cast_subscribe_btn: $('#cast_subscribe_btn'),
        player: {
          wrapper: $("#player_wrapper"),
          frame: $("#player_frame")
        },
        chat: {
          wrapper: $("#chat_wrapper"),
          list: $("#chat_list"),
          input: $("#chat_input"),
          ico: $("#chat_ico")
        },
        time_counter: $("#time_counter"),
        guests_cnt: $("#guests_cnt")
      };
      this.conf.start_date = new Date(this.conf.start);
      this.conf.duration = this.conf.duration || 180;
      this.conf.min_vs_start = Math.floor((new Date() - this.conf.start_date) / 60 / 1000);
      this.conf.is_online = this.conf.min_vs_start >= 0 && this.conf.min_vs_start < this.conf.duration;
      self = this;
      this._e.cast_subscribe_btn.click(this.action_cast_subscribe);
      if (this.conf.is_online) {
        this.player = new PlayerCast(this._e.player.frame);
        if (this.conf.locations && this.conf.locations.length) {
          this.player.load(this.conf.locations[0]);
        }
        this._e.chat.ico.click(function() {
          return self.toggle_chat();
        });
        this._e.chat.input.keypress(function(e) {
          if (e.which === 13) {
            return self.sendmsg_chat();
          }
        }).focus(function() {
          if (!self.user_is_auth()) {
            return false;
          }
        });
        this.update_chat();
      } else if (this.conf.min_vs_start < 0 && this._e.time_counter.length) {
        this.timer_tick();
      }
      casts_deck = new CastsDeck($("#casts"));
    }

    Page_Cast.prototype.timer_tick = function() {
      var func, min_left;
      min_left = Math.floor((new Date() - this.conf.start_date) / 60 / 1000);
      if (min_left >= 0 || (this.conf.min_vs_start < -40 && min_left >= -40)) {
        return location.reload();
      } else {
        this._e.time_counter.text(duration_text(-min_left));
        func = (function(_this) {
          return function() {
            return _this.timer_tick();
          };
        })(this);
        return setTimeout(func, 10000);
      }
    };

    Page_Cast.prototype.sendmsg_chat = function() {
      var text;
      if (this._app.user_is_auth()) {
        text = this._e.chat.input.val();
        if (text.length < 2) {
          return;
        }
        this._e.chat.input.prop('disabled', true);
        return this._app.rest.castschats.send.create(this.conf.id, {
          text: text
        }).done((function(_this) {
          return function() {
            return _this.update_chat(void 0, function() {
              return _this._e.chat.input.val("").prop('disabled', false);
            });
          };
        })(this)).fail();
      }
    };

    Page_Cast.prototype.update_chat = function(limit, cb) {
      var local_counter;
      if (!this.conf.is_online) {
        return;
      }
      this.chat.counter++;
      local_counter = this.chat.counter;
      limit = limit || 20;
      return this._app.rest.castschats.msgs.read(this.conf.id, {
        id_low: (this.chat.last_id || -1) + 1,
        limit: limit
      }).done((function(_this) {
        return function(data) {
          var e, i, name, text;
          if (local_counter === _this.chat.counter) {
            if (data && data.length) {
              i = data.length - 1;
              while (i >= 0) {
                name = "пользователь";
                if (data[i].user) {
                  name = data[i].user.name;
                }
                text = data[i].text || "&nbsp;";
                e = $('<div class="cast-chat-item"><div class="cast-chat-item-body"><span class="cast-chat-item-username">' + name + '</span>: <span class="cast-chat-item-msg">' + text + '</span></div></div>').appendTo(_this._e.chat.list);
                i--;
              }
              _this._e.chat.list.animate({
                scrollTop: e.position().top
              }, "slow");
              if (data.length >= limit) {
                _this.chat.attempts = [0, 0, 0];
                _this.chat.attempts_pos = 0;
              } else {
                if (_this.chat.attempts_pos === 0) {
                  _this.chat.attempts[0]++;
                  if (_this.chat.attempts[0] > 10) {
                    _this.chat.attempts_pos = 1;
                    _this.chat.attempts[0] = 0;
                  }
                }
              }
              _this.chat.last_id = data[data.length - 1].id || _this.chat.last_id;
            } else {
              if (_this.chat.attempts_pos < 2) {
                _this.chat.attempts[_this.chat.attempts_pos]++;
                if (_this.chat.attempts[_this.chat.attempts_pos] > 10) {
                  _this.chat.attempts[_this.chat.attempts_pos] = 0;
                  _this.chat.attempts_pos++;
                }
              }
            }
            if (!_this.chat.active) {
              _this.chat.attempts_pos = 2;
              _this.chat.attempts = [0, 0, 0];
            }
            return _this.update_chat_set(_this.chat.attempts_pos);
          }
        };
      })(this), typeof cb === "function" ? cb(true) : void 0).fail((function(_this) {
        return function() {
          if (local_counter === _this.chat.counter) {
            _this.chat.attempts = [0, 0, 0];
            _this.chat.attempts_pos = 0;
            _this.update_chat_set(2);
          }
          if (typeof cb === "function") {
            return cb(false);
          }
        };
      })(this));
    };

    Page_Cast.prototype.update_chat_set = function(timeout_id) {
      var func;
      func = (function(_this) {
        return function() {
          return _this.update_chat();
        };
      })(this);
      return setTimeout(func, (this.chat.timeout[timeout_id] || this.chat.timeout[2]) * 1000);
    };

    Page_Cast.prototype.toggle_chat = function(active) {
      if (active === void 0) {
        active = !this.chat.active;
      }
      if (this.chat.active === active) {
        return;
      }
      if (active) {
        this.chat.active = true;
        this.update_chat();
        this._e.player.wrapper.addClass("col-md-8");
        this._e.chat.wrapper.show();
      } else {
        this.chat.active = false;
        this._e.chat.wrapper.hide();
        this._e.player.wrapper.removeClass("col-md-8");
      }
      return false;
    };

    Page_Cast.prototype.action_cast_subscribe = function() {
      this._app.cast_action(this._app.page().conf.id, "subscribe");
      return false;
    };

    return Page_Cast;

  })(Page);

  window.InitApp = function(opts, page_name) {
    if (opts == null) {
      opts = {};
    }
    new App(opts, page_name);
    return delete window.InitApp;
  };

}).call(this);

//# sourceMappingURL=app1.js.map
